# 1 "helloWorld.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "helloWorld.cpp"
# 1 "/usr/include/GLFW/glfw3.h" 1 3 4
# 33 "/usr/include/GLFW/glfw3.h" 3 4

# 33 "/usr/include/GLFW/glfw3.h" 3 4
extern "C" {
# 122 "/usr/include/GLFW/glfw3.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 216 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 426 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 123 "/usr/include/GLFW/glfw3.h" 2 3 4



# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 428 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 427 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 428 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 429 "/usr/include/sys/cdefs.h" 2 3 4
# 429 "/usr/include/features.h" 2 3 4
# 452 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 453 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 131 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 97 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdint.h" 2 3 4
# 127 "/usr/include/GLFW/glfw3.h" 2 3 4
# 171 "/usr/include/GLFW/glfw3.h" 3 4
# 1 "/usr/include/GL/gl.h" 1 3 4
# 107 "/usr/include/GL/gl.h" 3 4
extern "C" {
# 121 "/usr/include/GL/gl.h" 3 4
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
# 748 "/usr/include/GL/gl.h" 3 4
extern void 
# 748 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 748 "/usr/include/GL/gl.h" 3 4
                     glClearIndex( GLfloat c );

extern void 
# 750 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 750 "/usr/include/GL/gl.h" 3 4
                     glClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );

extern void 
# 752 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 752 "/usr/include/GL/gl.h" 3 4
                     glClear( GLbitfield mask );

extern void 
# 754 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 754 "/usr/include/GL/gl.h" 3 4
                     glIndexMask( GLuint mask );

extern void 
# 756 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 756 "/usr/include/GL/gl.h" 3 4
                     glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );

extern void 
# 758 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 758 "/usr/include/GL/gl.h" 3 4
                     glAlphaFunc( GLenum func, GLclampf ref );

extern void 
# 760 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 760 "/usr/include/GL/gl.h" 3 4
                     glBlendFunc( GLenum sfactor, GLenum dfactor );

extern void 
# 762 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 762 "/usr/include/GL/gl.h" 3 4
                     glLogicOp( GLenum opcode );

extern void 
# 764 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 764 "/usr/include/GL/gl.h" 3 4
                     glCullFace( GLenum mode );

extern void 
# 766 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 766 "/usr/include/GL/gl.h" 3 4
                     glFrontFace( GLenum mode );

extern void 
# 768 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 768 "/usr/include/GL/gl.h" 3 4
                     glPointSize( GLfloat size );

extern void 
# 770 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 770 "/usr/include/GL/gl.h" 3 4
                     glLineWidth( GLfloat width );

extern void 
# 772 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 772 "/usr/include/GL/gl.h" 3 4
                     glLineStipple( GLint factor, GLushort pattern );

extern void 
# 774 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 774 "/usr/include/GL/gl.h" 3 4
                     glPolygonMode( GLenum face, GLenum mode );

extern void 
# 776 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 776 "/usr/include/GL/gl.h" 3 4
                     glPolygonOffset( GLfloat factor, GLfloat units );

extern void 
# 778 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 778 "/usr/include/GL/gl.h" 3 4
                     glPolygonStipple( const GLubyte *mask );

extern void 
# 780 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 780 "/usr/include/GL/gl.h" 3 4
                     glGetPolygonStipple( GLubyte *mask );

extern void 
# 782 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 782 "/usr/include/GL/gl.h" 3 4
                     glEdgeFlag( GLboolean flag );

extern void 
# 784 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 784 "/usr/include/GL/gl.h" 3 4
                     glEdgeFlagv( const GLboolean *flag );

extern void 
# 786 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 786 "/usr/include/GL/gl.h" 3 4
                     glScissor( GLint x, GLint y, GLsizei width, GLsizei height);

extern void 
# 788 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 788 "/usr/include/GL/gl.h" 3 4
                     glClipPlane( GLenum plane, const GLdouble *equation );

extern void 
# 790 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 790 "/usr/include/GL/gl.h" 3 4
                     glGetClipPlane( GLenum plane, GLdouble *equation );

extern void 
# 792 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 792 "/usr/include/GL/gl.h" 3 4
                     glDrawBuffer( GLenum mode );

extern void 
# 794 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 794 "/usr/include/GL/gl.h" 3 4
                     glReadBuffer( GLenum mode );

extern void 
# 796 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 796 "/usr/include/GL/gl.h" 3 4
                     glEnable( GLenum cap );

extern void 
# 798 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 798 "/usr/include/GL/gl.h" 3 4
                     glDisable( GLenum cap );

extern GLboolean 
# 800 "/usr/include/GL/gl.h"
               __attribute__((ms_abi)) 
# 800 "/usr/include/GL/gl.h" 3 4
                          glIsEnabled( GLenum cap );


extern void 
# 803 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 803 "/usr/include/GL/gl.h" 3 4
                     glEnableClientState( GLenum cap );

extern void 
# 805 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 805 "/usr/include/GL/gl.h" 3 4
                     glDisableClientState( GLenum cap );


extern void 
# 808 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 808 "/usr/include/GL/gl.h" 3 4
                     glGetBooleanv( GLenum pname, GLboolean *params );

extern void 
# 810 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 810 "/usr/include/GL/gl.h" 3 4
                     glGetDoublev( GLenum pname, GLdouble *params );

extern void 
# 812 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 812 "/usr/include/GL/gl.h" 3 4
                     glGetFloatv( GLenum pname, GLfloat *params );

extern void 
# 814 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 814 "/usr/include/GL/gl.h" 3 4
                     glGetIntegerv( GLenum pname, GLint *params );


extern void 
# 817 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 817 "/usr/include/GL/gl.h" 3 4
                     glPushAttrib( GLbitfield mask );

extern void 
# 819 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 819 "/usr/include/GL/gl.h" 3 4
                     glPopAttrib( void );


extern void 
# 822 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 822 "/usr/include/GL/gl.h" 3 4
                     glPushClientAttrib( GLbitfield mask );

extern void 
# 824 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 824 "/usr/include/GL/gl.h" 3 4
                     glPopClientAttrib( void );


extern GLint 
# 827 "/usr/include/GL/gl.h"
           __attribute__((ms_abi)) 
# 827 "/usr/include/GL/gl.h" 3 4
                      glRenderMode( GLenum mode );

extern GLenum 
# 829 "/usr/include/GL/gl.h"
            __attribute__((ms_abi)) 
# 829 "/usr/include/GL/gl.h" 3 4
                       glGetError( void );

extern const GLubyte * 
# 831 "/usr/include/GL/gl.h"
                     __attribute__((ms_abi)) 
# 831 "/usr/include/GL/gl.h" 3 4
                                glGetString( GLenum name );

extern void 
# 833 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 833 "/usr/include/GL/gl.h" 3 4
                     glFinish( void );

extern void 
# 835 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 835 "/usr/include/GL/gl.h" 3 4
                     glFlush( void );

extern void 
# 837 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 837 "/usr/include/GL/gl.h" 3 4
                     glHint( GLenum target, GLenum mode );






extern void 
# 844 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 844 "/usr/include/GL/gl.h" 3 4
                     glClearDepth( GLclampd depth );

extern void 
# 846 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 846 "/usr/include/GL/gl.h" 3 4
                     glDepthFunc( GLenum func );

extern void 
# 848 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 848 "/usr/include/GL/gl.h" 3 4
                     glDepthMask( GLboolean flag );

extern void 
# 850 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 850 "/usr/include/GL/gl.h" 3 4
                     glDepthRange( GLclampd near_val, GLclampd far_val );






extern void 
# 857 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 857 "/usr/include/GL/gl.h" 3 4
                     glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );

extern void 
# 859 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 859 "/usr/include/GL/gl.h" 3 4
                     glAccum( GLenum op, GLfloat value );






extern void 
# 866 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 866 "/usr/include/GL/gl.h" 3 4
                     glMatrixMode( GLenum mode );

extern void 
# 868 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 868 "/usr/include/GL/gl.h" 3 4
                     glOrtho( GLdouble left, GLdouble right,
                                 GLdouble bottom, GLdouble top,
                                 GLdouble near_val, GLdouble far_val );

extern void 
# 872 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 872 "/usr/include/GL/gl.h" 3 4
                     glFrustum( GLdouble left, GLdouble right,
                                   GLdouble bottom, GLdouble top,
                                   GLdouble near_val, GLdouble far_val );

extern void 
# 876 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 876 "/usr/include/GL/gl.h" 3 4
                     glViewport( GLint x, GLint y,
                                    GLsizei width, GLsizei height );

extern void 
# 879 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 879 "/usr/include/GL/gl.h" 3 4
                     glPushMatrix( void );

extern void 
# 881 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 881 "/usr/include/GL/gl.h" 3 4
                     glPopMatrix( void );

extern void 
# 883 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 883 "/usr/include/GL/gl.h" 3 4
                     glLoadIdentity( void );

extern void 
# 885 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 885 "/usr/include/GL/gl.h" 3 4
                     glLoadMatrixd( const GLdouble *m );
extern void 
# 886 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 886 "/usr/include/GL/gl.h" 3 4
                     glLoadMatrixf( const GLfloat *m );

extern void 
# 888 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 888 "/usr/include/GL/gl.h" 3 4
                     glMultMatrixd( const GLdouble *m );
extern void 
# 889 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 889 "/usr/include/GL/gl.h" 3 4
                     glMultMatrixf( const GLfloat *m );

extern void 
# 891 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 891 "/usr/include/GL/gl.h" 3 4
                     glRotated( GLdouble angle,
                                   GLdouble x, GLdouble y, GLdouble z );
extern void 
# 893 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 893 "/usr/include/GL/gl.h" 3 4
                     glRotatef( GLfloat angle,
                                   GLfloat x, GLfloat y, GLfloat z );

extern void 
# 896 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 896 "/usr/include/GL/gl.h" 3 4
                     glScaled( GLdouble x, GLdouble y, GLdouble z );
extern void 
# 897 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 897 "/usr/include/GL/gl.h" 3 4
                     glScalef( GLfloat x, GLfloat y, GLfloat z );

extern void 
# 899 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 899 "/usr/include/GL/gl.h" 3 4
                     glTranslated( GLdouble x, GLdouble y, GLdouble z );
extern void 
# 900 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 900 "/usr/include/GL/gl.h" 3 4
                     glTranslatef( GLfloat x, GLfloat y, GLfloat z );






extern GLboolean 
# 907 "/usr/include/GL/gl.h"
               __attribute__((ms_abi)) 
# 907 "/usr/include/GL/gl.h" 3 4
                          glIsList( GLuint list );

extern void 
# 909 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 909 "/usr/include/GL/gl.h" 3 4
                     glDeleteLists( GLuint list, GLsizei range );

extern GLuint 
# 911 "/usr/include/GL/gl.h"
            __attribute__((ms_abi)) 
# 911 "/usr/include/GL/gl.h" 3 4
                       glGenLists( GLsizei range );

extern void 
# 913 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 913 "/usr/include/GL/gl.h" 3 4
                     glNewList( GLuint list, GLenum mode );

extern void 
# 915 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 915 "/usr/include/GL/gl.h" 3 4
                     glEndList( void );

extern void 
# 917 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 917 "/usr/include/GL/gl.h" 3 4
                     glCallList( GLuint list );

extern void 
# 919 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 919 "/usr/include/GL/gl.h" 3 4
                     glCallLists( GLsizei n, GLenum type,
                                     const GLvoid *lists );

extern void 
# 922 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 922 "/usr/include/GL/gl.h" 3 4
                     glListBase( GLuint base );






extern void 
# 929 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 929 "/usr/include/GL/gl.h" 3 4
                     glBegin( GLenum mode );

extern void 
# 931 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 931 "/usr/include/GL/gl.h" 3 4
                     glEnd( void );


extern void 
# 934 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 934 "/usr/include/GL/gl.h" 3 4
                     glVertex2d( GLdouble x, GLdouble y );
extern void 
# 935 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 935 "/usr/include/GL/gl.h" 3 4
                     glVertex2f( GLfloat x, GLfloat y );
extern void 
# 936 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 936 "/usr/include/GL/gl.h" 3 4
                     glVertex2i( GLint x, GLint y );
extern void 
# 937 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 937 "/usr/include/GL/gl.h" 3 4
                     glVertex2s( GLshort x, GLshort y );

extern void 
# 939 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 939 "/usr/include/GL/gl.h" 3 4
                     glVertex3d( GLdouble x, GLdouble y, GLdouble z );
extern void 
# 940 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 940 "/usr/include/GL/gl.h" 3 4
                     glVertex3f( GLfloat x, GLfloat y, GLfloat z );
extern void 
# 941 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 941 "/usr/include/GL/gl.h" 3 4
                     glVertex3i( GLint x, GLint y, GLint z );
extern void 
# 942 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 942 "/usr/include/GL/gl.h" 3 4
                     glVertex3s( GLshort x, GLshort y, GLshort z );

extern void 
# 944 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 944 "/usr/include/GL/gl.h" 3 4
                     glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void 
# 945 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 945 "/usr/include/GL/gl.h" 3 4
                     glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void 
# 946 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 946 "/usr/include/GL/gl.h" 3 4
                     glVertex4i( GLint x, GLint y, GLint z, GLint w );
extern void 
# 947 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 947 "/usr/include/GL/gl.h" 3 4
                     glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w );

extern void 
# 949 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 949 "/usr/include/GL/gl.h" 3 4
                     glVertex2dv( const GLdouble *v );
extern void 
# 950 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 950 "/usr/include/GL/gl.h" 3 4
                     glVertex2fv( const GLfloat *v );
extern void 
# 951 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 951 "/usr/include/GL/gl.h" 3 4
                     glVertex2iv( const GLint *v );
extern void 
# 952 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 952 "/usr/include/GL/gl.h" 3 4
                     glVertex2sv( const GLshort *v );

extern void 
# 954 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 954 "/usr/include/GL/gl.h" 3 4
                     glVertex3dv( const GLdouble *v );
extern void 
# 955 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 955 "/usr/include/GL/gl.h" 3 4
                     glVertex3fv( const GLfloat *v );
extern void 
# 956 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 956 "/usr/include/GL/gl.h" 3 4
                     glVertex3iv( const GLint *v );
extern void 
# 957 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 957 "/usr/include/GL/gl.h" 3 4
                     glVertex3sv( const GLshort *v );

extern void 
# 959 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 959 "/usr/include/GL/gl.h" 3 4
                     glVertex4dv( const GLdouble *v );
extern void 
# 960 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 960 "/usr/include/GL/gl.h" 3 4
                     glVertex4fv( const GLfloat *v );
extern void 
# 961 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 961 "/usr/include/GL/gl.h" 3 4
                     glVertex4iv( const GLint *v );
extern void 
# 962 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 962 "/usr/include/GL/gl.h" 3 4
                     glVertex4sv( const GLshort *v );


extern void 
# 965 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 965 "/usr/include/GL/gl.h" 3 4
                     glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz );
extern void 
# 966 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 966 "/usr/include/GL/gl.h" 3 4
                     glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz );
extern void 
# 967 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 967 "/usr/include/GL/gl.h" 3 4
                     glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz );
extern void 
# 968 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 968 "/usr/include/GL/gl.h" 3 4
                     glNormal3i( GLint nx, GLint ny, GLint nz );
extern void 
# 969 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 969 "/usr/include/GL/gl.h" 3 4
                     glNormal3s( GLshort nx, GLshort ny, GLshort nz );

extern void 
# 971 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 971 "/usr/include/GL/gl.h" 3 4
                     glNormal3bv( const GLbyte *v );
extern void 
# 972 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 972 "/usr/include/GL/gl.h" 3 4
                     glNormal3dv( const GLdouble *v );
extern void 
# 973 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 973 "/usr/include/GL/gl.h" 3 4
                     glNormal3fv( const GLfloat *v );
extern void 
# 974 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 974 "/usr/include/GL/gl.h" 3 4
                     glNormal3iv( const GLint *v );
extern void 
# 975 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 975 "/usr/include/GL/gl.h" 3 4
                     glNormal3sv( const GLshort *v );


extern void 
# 978 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 978 "/usr/include/GL/gl.h" 3 4
                     glIndexd( GLdouble c );
extern void 
# 979 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 979 "/usr/include/GL/gl.h" 3 4
                     glIndexf( GLfloat c );
extern void 
# 980 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 980 "/usr/include/GL/gl.h" 3 4
                     glIndexi( GLint c );
extern void 
# 981 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 981 "/usr/include/GL/gl.h" 3 4
                     glIndexs( GLshort c );
extern void 
# 982 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 982 "/usr/include/GL/gl.h" 3 4
                     glIndexub( GLubyte c );

extern void 
# 984 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 984 "/usr/include/GL/gl.h" 3 4
                     glIndexdv( const GLdouble *c );
extern void 
# 985 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 985 "/usr/include/GL/gl.h" 3 4
                     glIndexfv( const GLfloat *c );
extern void 
# 986 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 986 "/usr/include/GL/gl.h" 3 4
                     glIndexiv( const GLint *c );
extern void 
# 987 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 987 "/usr/include/GL/gl.h" 3 4
                     glIndexsv( const GLshort *c );
extern void 
# 988 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 988 "/usr/include/GL/gl.h" 3 4
                     glIndexubv( const GLubyte *c );

extern void 
# 990 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 990 "/usr/include/GL/gl.h" 3 4
                     glColor3b( GLbyte red, GLbyte green, GLbyte blue );
extern void 
# 991 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 991 "/usr/include/GL/gl.h" 3 4
                     glColor3d( GLdouble red, GLdouble green, GLdouble blue );
extern void 
# 992 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 992 "/usr/include/GL/gl.h" 3 4
                     glColor3f( GLfloat red, GLfloat green, GLfloat blue );
extern void 
# 993 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 993 "/usr/include/GL/gl.h" 3 4
                     glColor3i( GLint red, GLint green, GLint blue );
extern void 
# 994 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 994 "/usr/include/GL/gl.h" 3 4
                     glColor3s( GLshort red, GLshort green, GLshort blue );
extern void 
# 995 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 995 "/usr/include/GL/gl.h" 3 4
                     glColor3ub( GLubyte red, GLubyte green, GLubyte blue );
extern void 
# 996 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 996 "/usr/include/GL/gl.h" 3 4
                     glColor3ui( GLuint red, GLuint green, GLuint blue );
extern void 
# 997 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 997 "/usr/include/GL/gl.h" 3 4
                     glColor3us( GLushort red, GLushort green, GLushort blue );

extern void 
# 999 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 999 "/usr/include/GL/gl.h" 3 4
                     glColor4b( GLbyte red, GLbyte green,
                                   GLbyte blue, GLbyte alpha );
extern void 
# 1001 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1001 "/usr/include/GL/gl.h" 3 4
                     glColor4d( GLdouble red, GLdouble green,
                                   GLdouble blue, GLdouble alpha );
extern void 
# 1003 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1003 "/usr/include/GL/gl.h" 3 4
                     glColor4f( GLfloat red, GLfloat green,
                                   GLfloat blue, GLfloat alpha );
extern void 
# 1005 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1005 "/usr/include/GL/gl.h" 3 4
                     glColor4i( GLint red, GLint green,
                                   GLint blue, GLint alpha );
extern void 
# 1007 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1007 "/usr/include/GL/gl.h" 3 4
                     glColor4s( GLshort red, GLshort green,
                                   GLshort blue, GLshort alpha );
extern void 
# 1009 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1009 "/usr/include/GL/gl.h" 3 4
                     glColor4ub( GLubyte red, GLubyte green,
                                    GLubyte blue, GLubyte alpha );
extern void 
# 1011 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1011 "/usr/include/GL/gl.h" 3 4
                     glColor4ui( GLuint red, GLuint green,
                                    GLuint blue, GLuint alpha );
extern void 
# 1013 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1013 "/usr/include/GL/gl.h" 3 4
                     glColor4us( GLushort red, GLushort green,
                                    GLushort blue, GLushort alpha );


extern void 
# 1017 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1017 "/usr/include/GL/gl.h" 3 4
                     glColor3bv( const GLbyte *v );
extern void 
# 1018 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1018 "/usr/include/GL/gl.h" 3 4
                     glColor3dv( const GLdouble *v );
extern void 
# 1019 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1019 "/usr/include/GL/gl.h" 3 4
                     glColor3fv( const GLfloat *v );
extern void 
# 1020 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1020 "/usr/include/GL/gl.h" 3 4
                     glColor3iv( const GLint *v );
extern void 
# 1021 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1021 "/usr/include/GL/gl.h" 3 4
                     glColor3sv( const GLshort *v );
extern void 
# 1022 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1022 "/usr/include/GL/gl.h" 3 4
                     glColor3ubv( const GLubyte *v );
extern void 
# 1023 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1023 "/usr/include/GL/gl.h" 3 4
                     glColor3uiv( const GLuint *v );
extern void 
# 1024 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1024 "/usr/include/GL/gl.h" 3 4
                     glColor3usv( const GLushort *v );

extern void 
# 1026 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1026 "/usr/include/GL/gl.h" 3 4
                     glColor4bv( const GLbyte *v );
extern void 
# 1027 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1027 "/usr/include/GL/gl.h" 3 4
                     glColor4dv( const GLdouble *v );
extern void 
# 1028 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1028 "/usr/include/GL/gl.h" 3 4
                     glColor4fv( const GLfloat *v );
extern void 
# 1029 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1029 "/usr/include/GL/gl.h" 3 4
                     glColor4iv( const GLint *v );
extern void 
# 1030 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1030 "/usr/include/GL/gl.h" 3 4
                     glColor4sv( const GLshort *v );
extern void 
# 1031 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1031 "/usr/include/GL/gl.h" 3 4
                     glColor4ubv( const GLubyte *v );
extern void 
# 1032 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1032 "/usr/include/GL/gl.h" 3 4
                     glColor4uiv( const GLuint *v );
extern void 
# 1033 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1033 "/usr/include/GL/gl.h" 3 4
                     glColor4usv( const GLushort *v );


extern void 
# 1036 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1036 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1d( GLdouble s );
extern void 
# 1037 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1037 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1f( GLfloat s );
extern void 
# 1038 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1038 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1i( GLint s );
extern void 
# 1039 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1039 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1s( GLshort s );

extern void 
# 1041 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1041 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2d( GLdouble s, GLdouble t );
extern void 
# 1042 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1042 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2f( GLfloat s, GLfloat t );
extern void 
# 1043 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1043 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2i( GLint s, GLint t );
extern void 
# 1044 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1044 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2s( GLshort s, GLshort t );

extern void 
# 1046 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1046 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3d( GLdouble s, GLdouble t, GLdouble r );
extern void 
# 1047 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1047 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3f( GLfloat s, GLfloat t, GLfloat r );
extern void 
# 1048 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1048 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3i( GLint s, GLint t, GLint r );
extern void 
# 1049 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1049 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3s( GLshort s, GLshort t, GLshort r );

extern void 
# 1051 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1051 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
extern void 
# 1052 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1052 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
extern void 
# 1053 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1053 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4i( GLint s, GLint t, GLint r, GLint q );
extern void 
# 1054 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1054 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q );

extern void 
# 1056 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1056 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1dv( const GLdouble *v );
extern void 
# 1057 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1057 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1fv( const GLfloat *v );
extern void 
# 1058 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1058 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1iv( const GLint *v );
extern void 
# 1059 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1059 "/usr/include/GL/gl.h" 3 4
                     glTexCoord1sv( const GLshort *v );

extern void 
# 1061 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1061 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2dv( const GLdouble *v );
extern void 
# 1062 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1062 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2fv( const GLfloat *v );
extern void 
# 1063 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1063 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2iv( const GLint *v );
extern void 
# 1064 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1064 "/usr/include/GL/gl.h" 3 4
                     glTexCoord2sv( const GLshort *v );

extern void 
# 1066 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1066 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3dv( const GLdouble *v );
extern void 
# 1067 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1067 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3fv( const GLfloat *v );
extern void 
# 1068 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1068 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3iv( const GLint *v );
extern void 
# 1069 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1069 "/usr/include/GL/gl.h" 3 4
                     glTexCoord3sv( const GLshort *v );

extern void 
# 1071 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1071 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4dv( const GLdouble *v );
extern void 
# 1072 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1072 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4fv( const GLfloat *v );
extern void 
# 1073 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1073 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4iv( const GLint *v );
extern void 
# 1074 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1074 "/usr/include/GL/gl.h" 3 4
                     glTexCoord4sv( const GLshort *v );


extern void 
# 1077 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1077 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2d( GLdouble x, GLdouble y );
extern void 
# 1078 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1078 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2f( GLfloat x, GLfloat y );
extern void 
# 1079 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1079 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2i( GLint x, GLint y );
extern void 
# 1080 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1080 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2s( GLshort x, GLshort y );

extern void 
# 1082 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1082 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3d( GLdouble x, GLdouble y, GLdouble z );
extern void 
# 1083 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1083 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3f( GLfloat x, GLfloat y, GLfloat z );
extern void 
# 1084 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1084 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3i( GLint x, GLint y, GLint z );
extern void 
# 1085 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1085 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3s( GLshort x, GLshort y, GLshort z );

extern void 
# 1087 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1087 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void 
# 1088 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1088 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void 
# 1089 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1089 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4i( GLint x, GLint y, GLint z, GLint w );
extern void 
# 1090 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1090 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w );

extern void 
# 1092 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1092 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2dv( const GLdouble *v );
extern void 
# 1093 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1093 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2fv( const GLfloat *v );
extern void 
# 1094 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1094 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2iv( const GLint *v );
extern void 
# 1095 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1095 "/usr/include/GL/gl.h" 3 4
                     glRasterPos2sv( const GLshort *v );

extern void 
# 1097 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1097 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3dv( const GLdouble *v );
extern void 
# 1098 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1098 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3fv( const GLfloat *v );
extern void 
# 1099 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1099 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3iv( const GLint *v );
extern void 
# 1100 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1100 "/usr/include/GL/gl.h" 3 4
                     glRasterPos3sv( const GLshort *v );

extern void 
# 1102 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1102 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4dv( const GLdouble *v );
extern void 
# 1103 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1103 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4fv( const GLfloat *v );
extern void 
# 1104 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1104 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4iv( const GLint *v );
extern void 
# 1105 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1105 "/usr/include/GL/gl.h" 3 4
                     glRasterPos4sv( const GLshort *v );


extern void 
# 1108 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1108 "/usr/include/GL/gl.h" 3 4
                     glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
extern void 
# 1109 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1109 "/usr/include/GL/gl.h" 3 4
                     glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
extern void 
# 1110 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1110 "/usr/include/GL/gl.h" 3 4
                     glRecti( GLint x1, GLint y1, GLint x2, GLint y2 );
extern void 
# 1111 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1111 "/usr/include/GL/gl.h" 3 4
                     glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );


extern void 
# 1114 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1114 "/usr/include/GL/gl.h" 3 4
                     glRectdv( const GLdouble *v1, const GLdouble *v2 );
extern void 
# 1115 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1115 "/usr/include/GL/gl.h" 3 4
                     glRectfv( const GLfloat *v1, const GLfloat *v2 );
extern void 
# 1116 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1116 "/usr/include/GL/gl.h" 3 4
                     glRectiv( const GLint *v1, const GLint *v2 );
extern void 
# 1117 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1117 "/usr/include/GL/gl.h" 3 4
                     glRectsv( const GLshort *v1, const GLshort *v2 );






extern void 
# 1124 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1124 "/usr/include/GL/gl.h" 3 4
                     glVertexPointer( GLint size, GLenum type,
                                       GLsizei stride, const GLvoid *ptr );

extern void 
# 1127 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1127 "/usr/include/GL/gl.h" 3 4
                     glNormalPointer( GLenum type, GLsizei stride,
                                       const GLvoid *ptr );

extern void 
# 1130 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1130 "/usr/include/GL/gl.h" 3 4
                     glColorPointer( GLint size, GLenum type,
                                      GLsizei stride, const GLvoid *ptr );

extern void 
# 1133 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1133 "/usr/include/GL/gl.h" 3 4
                     glIndexPointer( GLenum type, GLsizei stride,
                                      const GLvoid *ptr );

extern void 
# 1136 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1136 "/usr/include/GL/gl.h" 3 4
                     glTexCoordPointer( GLint size, GLenum type,
                                         GLsizei stride, const GLvoid *ptr );

extern void 
# 1139 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1139 "/usr/include/GL/gl.h" 3 4
                     glEdgeFlagPointer( GLsizei stride, const GLvoid *ptr );

extern void 
# 1141 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1141 "/usr/include/GL/gl.h" 3 4
                     glGetPointerv( GLenum pname, GLvoid **params );

extern void 
# 1143 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1143 "/usr/include/GL/gl.h" 3 4
                     glArrayElement( GLint i );

extern void 
# 1145 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1145 "/usr/include/GL/gl.h" 3 4
                     glDrawArrays( GLenum mode, GLint first, GLsizei count );

extern void 
# 1147 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1147 "/usr/include/GL/gl.h" 3 4
                     glDrawElements( GLenum mode, GLsizei count,
                                      GLenum type, const GLvoid *indices );

extern void 
# 1150 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1150 "/usr/include/GL/gl.h" 3 4
                     glInterleavedArrays( GLenum format, GLsizei stride,
                                           const GLvoid *pointer );





extern void 
# 1157 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1157 "/usr/include/GL/gl.h" 3 4
                     glShadeModel( GLenum mode );

extern void 
# 1159 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1159 "/usr/include/GL/gl.h" 3 4
                     glLightf( GLenum light, GLenum pname, GLfloat param );
extern void 
# 1160 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1160 "/usr/include/GL/gl.h" 3 4
                     glLighti( GLenum light, GLenum pname, GLint param );
extern void 
# 1161 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1161 "/usr/include/GL/gl.h" 3 4
                     glLightfv( GLenum light, GLenum pname,
                                 const GLfloat *params );
extern void 
# 1163 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1163 "/usr/include/GL/gl.h" 3 4
                     glLightiv( GLenum light, GLenum pname,
                                 const GLint *params );

extern void 
# 1166 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1166 "/usr/include/GL/gl.h" 3 4
                     glGetLightfv( GLenum light, GLenum pname,
                                    GLfloat *params );
extern void 
# 1168 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1168 "/usr/include/GL/gl.h" 3 4
                     glGetLightiv( GLenum light, GLenum pname,
                                    GLint *params );

extern void 
# 1171 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1171 "/usr/include/GL/gl.h" 3 4
                     glLightModelf( GLenum pname, GLfloat param );
extern void 
# 1172 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1172 "/usr/include/GL/gl.h" 3 4
                     glLightModeli( GLenum pname, GLint param );
extern void 
# 1173 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1173 "/usr/include/GL/gl.h" 3 4
                     glLightModelfv( GLenum pname, const GLfloat *params );
extern void 
# 1174 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1174 "/usr/include/GL/gl.h" 3 4
                     glLightModeliv( GLenum pname, const GLint *params );

extern void 
# 1176 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1176 "/usr/include/GL/gl.h" 3 4
                     glMaterialf( GLenum face, GLenum pname, GLfloat param );
extern void 
# 1177 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1177 "/usr/include/GL/gl.h" 3 4
                     glMateriali( GLenum face, GLenum pname, GLint param );
extern void 
# 1178 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1178 "/usr/include/GL/gl.h" 3 4
                     glMaterialfv( GLenum face, GLenum pname, const GLfloat *params );
extern void 
# 1179 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1179 "/usr/include/GL/gl.h" 3 4
                     glMaterialiv( GLenum face, GLenum pname, const GLint *params );

extern void 
# 1181 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1181 "/usr/include/GL/gl.h" 3 4
                     glGetMaterialfv( GLenum face, GLenum pname, GLfloat *params );
extern void 
# 1182 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1182 "/usr/include/GL/gl.h" 3 4
                     glGetMaterialiv( GLenum face, GLenum pname, GLint *params );

extern void 
# 1184 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1184 "/usr/include/GL/gl.h" 3 4
                     glColorMaterial( GLenum face, GLenum mode );






extern void 
# 1191 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1191 "/usr/include/GL/gl.h" 3 4
                     glPixelZoom( GLfloat xfactor, GLfloat yfactor );

extern void 
# 1193 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1193 "/usr/include/GL/gl.h" 3 4
                     glPixelStoref( GLenum pname, GLfloat param );
extern void 
# 1194 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1194 "/usr/include/GL/gl.h" 3 4
                     glPixelStorei( GLenum pname, GLint param );

extern void 
# 1196 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1196 "/usr/include/GL/gl.h" 3 4
                     glPixelTransferf( GLenum pname, GLfloat param );
extern void 
# 1197 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1197 "/usr/include/GL/gl.h" 3 4
                     glPixelTransferi( GLenum pname, GLint param );

extern void 
# 1199 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1199 "/usr/include/GL/gl.h" 3 4
                     glPixelMapfv( GLenum map, GLsizei mapsize,
                                    const GLfloat *values );
extern void 
# 1201 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1201 "/usr/include/GL/gl.h" 3 4
                     glPixelMapuiv( GLenum map, GLsizei mapsize,
                                     const GLuint *values );
extern void 
# 1203 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1203 "/usr/include/GL/gl.h" 3 4
                     glPixelMapusv( GLenum map, GLsizei mapsize,
                                     const GLushort *values );

extern void 
# 1206 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1206 "/usr/include/GL/gl.h" 3 4
                     glGetPixelMapfv( GLenum map, GLfloat *values );
extern void 
# 1207 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1207 "/usr/include/GL/gl.h" 3 4
                     glGetPixelMapuiv( GLenum map, GLuint *values );
extern void 
# 1208 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1208 "/usr/include/GL/gl.h" 3 4
                     glGetPixelMapusv( GLenum map, GLushort *values );

extern void 
# 1210 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1210 "/usr/include/GL/gl.h" 3 4
                     glBitmap( GLsizei width, GLsizei height,
                                GLfloat xorig, GLfloat yorig,
                                GLfloat xmove, GLfloat ymove,
                                const GLubyte *bitmap );

extern void 
# 1215 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1215 "/usr/include/GL/gl.h" 3 4
                     glReadPixels( GLint x, GLint y,
                                    GLsizei width, GLsizei height,
                                    GLenum format, GLenum type,
                                    GLvoid *pixels );

extern void 
# 1220 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1220 "/usr/include/GL/gl.h" 3 4
                     glDrawPixels( GLsizei width, GLsizei height,
                                    GLenum format, GLenum type,
                                    const GLvoid *pixels );

extern void 
# 1224 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1224 "/usr/include/GL/gl.h" 3 4
                     glCopyPixels( GLint x, GLint y,
                                    GLsizei width, GLsizei height,
                                    GLenum type );





extern void 
# 1232 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1232 "/usr/include/GL/gl.h" 3 4
                     glStencilFunc( GLenum func, GLint ref, GLuint mask );

extern void 
# 1234 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1234 "/usr/include/GL/gl.h" 3 4
                     glStencilMask( GLuint mask );

extern void 
# 1236 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1236 "/usr/include/GL/gl.h" 3 4
                     glStencilOp( GLenum fail, GLenum zfail, GLenum zpass );

extern void 
# 1238 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1238 "/usr/include/GL/gl.h" 3 4
                     glClearStencil( GLint s );







extern void 
# 1246 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1246 "/usr/include/GL/gl.h" 3 4
                     glTexGend( GLenum coord, GLenum pname, GLdouble param );
extern void 
# 1247 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1247 "/usr/include/GL/gl.h" 3 4
                     glTexGenf( GLenum coord, GLenum pname, GLfloat param );
extern void 
# 1248 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1248 "/usr/include/GL/gl.h" 3 4
                     glTexGeni( GLenum coord, GLenum pname, GLint param );

extern void 
# 1250 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1250 "/usr/include/GL/gl.h" 3 4
                     glTexGendv( GLenum coord, GLenum pname, const GLdouble *params );
extern void 
# 1251 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1251 "/usr/include/GL/gl.h" 3 4
                     glTexGenfv( GLenum coord, GLenum pname, const GLfloat *params );
extern void 
# 1252 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1252 "/usr/include/GL/gl.h" 3 4
                     glTexGeniv( GLenum coord, GLenum pname, const GLint *params );

extern void 
# 1254 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1254 "/usr/include/GL/gl.h" 3 4
                     glGetTexGendv( GLenum coord, GLenum pname, GLdouble *params );
extern void 
# 1255 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1255 "/usr/include/GL/gl.h" 3 4
                     glGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params );
extern void 
# 1256 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1256 "/usr/include/GL/gl.h" 3 4
                     glGetTexGeniv( GLenum coord, GLenum pname, GLint *params );


extern void 
# 1259 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1259 "/usr/include/GL/gl.h" 3 4
                     glTexEnvf( GLenum target, GLenum pname, GLfloat param );
extern void 
# 1260 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1260 "/usr/include/GL/gl.h" 3 4
                     glTexEnvi( GLenum target, GLenum pname, GLint param );

extern void 
# 1262 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1262 "/usr/include/GL/gl.h" 3 4
                     glTexEnvfv( GLenum target, GLenum pname, const GLfloat *params );
extern void 
# 1263 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1263 "/usr/include/GL/gl.h" 3 4
                     glTexEnviv( GLenum target, GLenum pname, const GLint *params );

extern void 
# 1265 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1265 "/usr/include/GL/gl.h" 3 4
                     glGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params );
extern void 
# 1266 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1266 "/usr/include/GL/gl.h" 3 4
                     glGetTexEnviv( GLenum target, GLenum pname, GLint *params );


extern void 
# 1269 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1269 "/usr/include/GL/gl.h" 3 4
                     glTexParameterf( GLenum target, GLenum pname, GLfloat param );
extern void 
# 1270 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1270 "/usr/include/GL/gl.h" 3 4
                     glTexParameteri( GLenum target, GLenum pname, GLint param );

extern void 
# 1272 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1272 "/usr/include/GL/gl.h" 3 4
                     glTexParameterfv( GLenum target, GLenum pname,
                                          const GLfloat *params );
extern void 
# 1274 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1274 "/usr/include/GL/gl.h" 3 4
                     glTexParameteriv( GLenum target, GLenum pname,
                                          const GLint *params );

extern void 
# 1277 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1277 "/usr/include/GL/gl.h" 3 4
                     glGetTexParameterfv( GLenum target,
                                           GLenum pname, GLfloat *params);
extern void 
# 1279 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1279 "/usr/include/GL/gl.h" 3 4
                     glGetTexParameteriv( GLenum target,
                                           GLenum pname, GLint *params );

extern void 
# 1282 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1282 "/usr/include/GL/gl.h" 3 4
                     glGetTexLevelParameterfv( GLenum target, GLint level,
                                                GLenum pname, GLfloat *params );
extern void 
# 1284 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1284 "/usr/include/GL/gl.h" 3 4
                     glGetTexLevelParameteriv( GLenum target, GLint level,
                                                GLenum pname, GLint *params );


extern void 
# 1288 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1288 "/usr/include/GL/gl.h" 3 4
                     glTexImage1D( GLenum target, GLint level,
                                    GLint internalFormat,
                                    GLsizei width, GLint border,
                                    GLenum format, GLenum type,
                                    const GLvoid *pixels );

extern void 
# 1294 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1294 "/usr/include/GL/gl.h" 3 4
                     glTexImage2D( GLenum target, GLint level,
                                    GLint internalFormat,
                                    GLsizei width, GLsizei height,
                                    GLint border, GLenum format, GLenum type,
                                    const GLvoid *pixels );

extern void 
# 1300 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1300 "/usr/include/GL/gl.h" 3 4
                     glGetTexImage( GLenum target, GLint level,
                                     GLenum format, GLenum type,
                                     GLvoid *pixels );




extern void 
# 1307 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1307 "/usr/include/GL/gl.h" 3 4
                     glGenTextures( GLsizei n, GLuint *textures );

extern void 
# 1309 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1309 "/usr/include/GL/gl.h" 3 4
                     glDeleteTextures( GLsizei n, const GLuint *textures);

extern void 
# 1311 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1311 "/usr/include/GL/gl.h" 3 4
                     glBindTexture( GLenum target, GLuint texture );

extern void 
# 1313 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1313 "/usr/include/GL/gl.h" 3 4
                     glPrioritizeTextures( GLsizei n,
                                            const GLuint *textures,
                                            const GLclampf *priorities );

extern GLboolean 
# 1317 "/usr/include/GL/gl.h"
               __attribute__((ms_abi)) 
# 1317 "/usr/include/GL/gl.h" 3 4
                          glAreTexturesResident( GLsizei n,
                                                  const GLuint *textures,
                                                  GLboolean *residences );

extern GLboolean 
# 1321 "/usr/include/GL/gl.h"
               __attribute__((ms_abi)) 
# 1321 "/usr/include/GL/gl.h" 3 4
                          glIsTexture( GLuint texture );


extern void 
# 1324 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1324 "/usr/include/GL/gl.h" 3 4
                     glTexSubImage1D( GLenum target, GLint level,
                                       GLint xoffset,
                                       GLsizei width, GLenum format,
                                       GLenum type, const GLvoid *pixels );


extern void 
# 1330 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1330 "/usr/include/GL/gl.h" 3 4
                     glTexSubImage2D( GLenum target, GLint level,
                                       GLint xoffset, GLint yoffset,
                                       GLsizei width, GLsizei height,
                                       GLenum format, GLenum type,
                                       const GLvoid *pixels );


extern void 
# 1337 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1337 "/usr/include/GL/gl.h" 3 4
                     glCopyTexImage1D( GLenum target, GLint level,
                                        GLenum internalformat,
                                        GLint x, GLint y,
                                        GLsizei width, GLint border );


extern void 
# 1343 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1343 "/usr/include/GL/gl.h" 3 4
                     glCopyTexImage2D( GLenum target, GLint level,
                                        GLenum internalformat,
                                        GLint x, GLint y,
                                        GLsizei width, GLsizei height,
                                        GLint border );


extern void 
# 1350 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1350 "/usr/include/GL/gl.h" 3 4
                     glCopyTexSubImage1D( GLenum target, GLint level,
                                           GLint xoffset, GLint x, GLint y,
                                           GLsizei width );


extern void 
# 1355 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1355 "/usr/include/GL/gl.h" 3 4
                     glCopyTexSubImage2D( GLenum target, GLint level,
                                           GLint xoffset, GLint yoffset,
                                           GLint x, GLint y,
                                           GLsizei width, GLsizei height );






extern void 
# 1365 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1365 "/usr/include/GL/gl.h" 3 4
                     glMap1d( GLenum target, GLdouble u1, GLdouble u2,
                               GLint stride,
                               GLint order, const GLdouble *points );
extern void 
# 1368 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1368 "/usr/include/GL/gl.h" 3 4
                     glMap1f( GLenum target, GLfloat u1, GLfloat u2,
                               GLint stride,
                               GLint order, const GLfloat *points );

extern void 
# 1372 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1372 "/usr/include/GL/gl.h" 3 4
                     glMap2d( GLenum target,
       GLdouble u1, GLdouble u2, GLint ustride, GLint uorder,
       GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,
       const GLdouble *points );
extern void 
# 1376 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1376 "/usr/include/GL/gl.h" 3 4
                     glMap2f( GLenum target,
       GLfloat u1, GLfloat u2, GLint ustride, GLint uorder,
       GLfloat v1, GLfloat v2, GLint vstride, GLint vorder,
       const GLfloat *points );

extern void 
# 1381 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1381 "/usr/include/GL/gl.h" 3 4
                     glGetMapdv( GLenum target, GLenum query, GLdouble *v );
extern void 
# 1382 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1382 "/usr/include/GL/gl.h" 3 4
                     glGetMapfv( GLenum target, GLenum query, GLfloat *v );
extern void 
# 1383 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1383 "/usr/include/GL/gl.h" 3 4
                     glGetMapiv( GLenum target, GLenum query, GLint *v );

extern void 
# 1385 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1385 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord1d( GLdouble u );
extern void 
# 1386 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1386 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord1f( GLfloat u );

extern void 
# 1388 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1388 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord1dv( const GLdouble *u );
extern void 
# 1389 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1389 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord1fv( const GLfloat *u );

extern void 
# 1391 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1391 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord2d( GLdouble u, GLdouble v );
extern void 
# 1392 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1392 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord2f( GLfloat u, GLfloat v );

extern void 
# 1394 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1394 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord2dv( const GLdouble *u );
extern void 
# 1395 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1395 "/usr/include/GL/gl.h" 3 4
                     glEvalCoord2fv( const GLfloat *u );

extern void 
# 1397 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1397 "/usr/include/GL/gl.h" 3 4
                     glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 );
extern void 
# 1398 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1398 "/usr/include/GL/gl.h" 3 4
                     glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 );

extern void 
# 1400 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1400 "/usr/include/GL/gl.h" 3 4
                     glMapGrid2d( GLint un, GLdouble u1, GLdouble u2,
                                   GLint vn, GLdouble v1, GLdouble v2 );
extern void 
# 1402 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1402 "/usr/include/GL/gl.h" 3 4
                     glMapGrid2f( GLint un, GLfloat u1, GLfloat u2,
                                   GLint vn, GLfloat v1, GLfloat v2 );

extern void 
# 1405 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1405 "/usr/include/GL/gl.h" 3 4
                     glEvalPoint1( GLint i );

extern void 
# 1407 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1407 "/usr/include/GL/gl.h" 3 4
                     glEvalPoint2( GLint i, GLint j );

extern void 
# 1409 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1409 "/usr/include/GL/gl.h" 3 4
                     glEvalMesh1( GLenum mode, GLint i1, GLint i2 );

extern void 
# 1411 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1411 "/usr/include/GL/gl.h" 3 4
                     glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );






extern void 
# 1418 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1418 "/usr/include/GL/gl.h" 3 4
                     glFogf( GLenum pname, GLfloat param );

extern void 
# 1420 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1420 "/usr/include/GL/gl.h" 3 4
                     glFogi( GLenum pname, GLint param );

extern void 
# 1422 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1422 "/usr/include/GL/gl.h" 3 4
                     glFogfv( GLenum pname, const GLfloat *params );

extern void 
# 1424 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1424 "/usr/include/GL/gl.h" 3 4
                     glFogiv( GLenum pname, const GLint *params );






extern void 
# 1431 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1431 "/usr/include/GL/gl.h" 3 4
                     glFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer );

extern void 
# 1433 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1433 "/usr/include/GL/gl.h" 3 4
                     glPassThrough( GLfloat token );

extern void 
# 1435 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1435 "/usr/include/GL/gl.h" 3 4
                     glSelectBuffer( GLsizei size, GLuint *buffer );

extern void 
# 1437 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1437 "/usr/include/GL/gl.h" 3 4
                     glInitNames( void );

extern void 
# 1439 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1439 "/usr/include/GL/gl.h" 3 4
                     glLoadName( GLuint name );

extern void 
# 1441 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1441 "/usr/include/GL/gl.h" 3 4
                     glPushName( GLuint name );

extern void 
# 1443 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1443 "/usr/include/GL/gl.h" 3 4
                     glPopName( void );
# 1493 "/usr/include/GL/gl.h" 3 4
extern void 
# 1493 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1493 "/usr/include/GL/gl.h" 3 4
                     glDrawRangeElements( GLenum mode, GLuint start,
 GLuint end, GLsizei count, GLenum type, const GLvoid *indices );

extern void 
# 1496 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1496 "/usr/include/GL/gl.h" 3 4
                     glTexImage3D( GLenum target, GLint level,
                                      GLint internalFormat,
                                      GLsizei width, GLsizei height,
                                      GLsizei depth, GLint border,
                                      GLenum format, GLenum type,
                                      const GLvoid *pixels );

extern void 
# 1503 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1503 "/usr/include/GL/gl.h" 3 4
                     glTexSubImage3D( GLenum target, GLint level,
                                         GLint xoffset, GLint yoffset,
                                         GLint zoffset, GLsizei width,
                                         GLsizei height, GLsizei depth,
                                         GLenum format,
                                         GLenum type, const GLvoid *pixels);

extern void 
# 1510 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1510 "/usr/include/GL/gl.h" 3 4
                     glCopyTexSubImage3D( GLenum target, GLint level,
                                             GLint xoffset, GLint yoffset,
                                             GLint zoffset, GLint x,
                                             GLint y, GLsizei width,
                                             GLsizei height );

typedef void (
# 1516 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1516 "/usr/include/GL/gl.h" 3 4
             * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
typedef void (
# 1517 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1517 "/usr/include/GL/gl.h" 3 4
             * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void (
# 1518 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1518 "/usr/include/GL/gl.h" 3 4
             * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
typedef void (
# 1519 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1519 "/usr/include/GL/gl.h" 3 4
             * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
# 1603 "/usr/include/GL/gl.h" 3 4
extern void 
# 1603 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1603 "/usr/include/GL/gl.h" 3 4
                     glColorTable( GLenum target, GLenum internalformat,
                                    GLsizei width, GLenum format,
                                    GLenum type, const GLvoid *table );

extern void 
# 1607 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1607 "/usr/include/GL/gl.h" 3 4
                     glColorSubTable( GLenum target,
                                       GLsizei start, GLsizei count,
                                       GLenum format, GLenum type,
                                       const GLvoid *data );

extern void 
# 1612 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1612 "/usr/include/GL/gl.h" 3 4
                     glColorTableParameteriv(GLenum target, GLenum pname,
                                              const GLint *params);

extern void 
# 1615 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1615 "/usr/include/GL/gl.h" 3 4
                     glColorTableParameterfv(GLenum target, GLenum pname,
                                              const GLfloat *params);

extern void 
# 1618 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1618 "/usr/include/GL/gl.h" 3 4
                     glCopyColorSubTable( GLenum target, GLsizei start,
                                           GLint x, GLint y, GLsizei width );

extern void 
# 1621 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1621 "/usr/include/GL/gl.h" 3 4
                     glCopyColorTable( GLenum target, GLenum internalformat,
                                        GLint x, GLint y, GLsizei width );

extern void 
# 1624 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1624 "/usr/include/GL/gl.h" 3 4
                     glGetColorTable( GLenum target, GLenum format,
                                       GLenum type, GLvoid *table );

extern void 
# 1627 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1627 "/usr/include/GL/gl.h" 3 4
                     glGetColorTableParameterfv( GLenum target, GLenum pname,
                                                  GLfloat *params );

extern void 
# 1630 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1630 "/usr/include/GL/gl.h" 3 4
                     glGetColorTableParameteriv( GLenum target, GLenum pname,
                                                  GLint *params );

extern void 
# 1633 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1633 "/usr/include/GL/gl.h" 3 4
                     glBlendEquation( GLenum mode );

extern void 
# 1635 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1635 "/usr/include/GL/gl.h" 3 4
                     glBlendColor( GLclampf red, GLclampf green,
                                    GLclampf blue, GLclampf alpha );

extern void 
# 1638 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1638 "/usr/include/GL/gl.h" 3 4
                     glHistogram( GLenum target, GLsizei width,
       GLenum internalformat, GLboolean sink );

extern void 
# 1641 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1641 "/usr/include/GL/gl.h" 3 4
                     glResetHistogram( GLenum target );

extern void 
# 1643 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1643 "/usr/include/GL/gl.h" 3 4
                     glGetHistogram( GLenum target, GLboolean reset,
          GLenum format, GLenum type,
          GLvoid *values );

extern void 
# 1647 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1647 "/usr/include/GL/gl.h" 3 4
                     glGetHistogramParameterfv( GLenum target, GLenum pname,
       GLfloat *params );

extern void 
# 1650 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1650 "/usr/include/GL/gl.h" 3 4
                     glGetHistogramParameteriv( GLenum target, GLenum pname,
       GLint *params );

extern void 
# 1653 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1653 "/usr/include/GL/gl.h" 3 4
                     glMinmax( GLenum target, GLenum internalformat,
    GLboolean sink );

extern void 
# 1656 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1656 "/usr/include/GL/gl.h" 3 4
                     glResetMinmax( GLenum target );

extern void 
# 1658 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1658 "/usr/include/GL/gl.h" 3 4
                     glGetMinmax( GLenum target, GLboolean reset,
                                   GLenum format, GLenum types,
                                   GLvoid *values );

extern void 
# 1662 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1662 "/usr/include/GL/gl.h" 3 4
                     glGetMinmaxParameterfv( GLenum target, GLenum pname,
           GLfloat *params );

extern void 
# 1665 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1665 "/usr/include/GL/gl.h" 3 4
                     glGetMinmaxParameteriv( GLenum target, GLenum pname,
           GLint *params );

extern void 
# 1668 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1668 "/usr/include/GL/gl.h" 3 4
                     glConvolutionFilter1D( GLenum target,
 GLenum internalformat, GLsizei width, GLenum format, GLenum type,
 const GLvoid *image );

extern void 
# 1672 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1672 "/usr/include/GL/gl.h" 3 4
                     glConvolutionFilter2D( GLenum target,
 GLenum internalformat, GLsizei width, GLsizei height, GLenum format,
 GLenum type, const GLvoid *image );

extern void 
# 1676 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1676 "/usr/include/GL/gl.h" 3 4
                     glConvolutionParameterf( GLenum target, GLenum pname,
 GLfloat params );

extern void 
# 1679 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1679 "/usr/include/GL/gl.h" 3 4
                     glConvolutionParameterfv( GLenum target, GLenum pname,
 const GLfloat *params );

extern void 
# 1682 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1682 "/usr/include/GL/gl.h" 3 4
                     glConvolutionParameteri( GLenum target, GLenum pname,
 GLint params );

extern void 
# 1685 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1685 "/usr/include/GL/gl.h" 3 4
                     glConvolutionParameteriv( GLenum target, GLenum pname,
 const GLint *params );

extern void 
# 1688 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1688 "/usr/include/GL/gl.h" 3 4
                     glCopyConvolutionFilter1D( GLenum target,
 GLenum internalformat, GLint x, GLint y, GLsizei width );

extern void 
# 1691 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1691 "/usr/include/GL/gl.h" 3 4
                     glCopyConvolutionFilter2D( GLenum target,
 GLenum internalformat, GLint x, GLint y, GLsizei width,
 GLsizei height);

extern void 
# 1695 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1695 "/usr/include/GL/gl.h" 3 4
                     glGetConvolutionFilter( GLenum target, GLenum format,
 GLenum type, GLvoid *image );

extern void 
# 1698 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1698 "/usr/include/GL/gl.h" 3 4
                     glGetConvolutionParameterfv( GLenum target, GLenum pname,
 GLfloat *params );

extern void 
# 1701 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1701 "/usr/include/GL/gl.h" 3 4
                     glGetConvolutionParameteriv( GLenum target, GLenum pname,
 GLint *params );

extern void 
# 1704 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1704 "/usr/include/GL/gl.h" 3 4
                     glSeparableFilter2D( GLenum target,
 GLenum internalformat, GLsizei width, GLsizei height, GLenum format,
 GLenum type, const GLvoid *row, const GLvoid *column );

extern void 
# 1708 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1708 "/usr/include/GL/gl.h" 3 4
                     glGetSeparableFilter( GLenum target, GLenum format,
 GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );
# 1823 "/usr/include/GL/gl.h" 3 4
extern void 
# 1823 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1823 "/usr/include/GL/gl.h" 3 4
                     glActiveTexture( GLenum texture );

extern void 
# 1825 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1825 "/usr/include/GL/gl.h" 3 4
                     glClientActiveTexture( GLenum texture );

extern void 
# 1827 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1827 "/usr/include/GL/gl.h" 3 4
                     glCompressedTexImage1D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data );

extern void 
# 1829 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1829 "/usr/include/GL/gl.h" 3 4
                     glCompressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );

extern void 
# 1831 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1831 "/usr/include/GL/gl.h" 3 4
                     glCompressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data );

extern void 
# 1833 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1833 "/usr/include/GL/gl.h" 3 4
                     glCompressedTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data );

extern void 
# 1835 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1835 "/usr/include/GL/gl.h" 3 4
                     glCompressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );

extern void 
# 1837 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1837 "/usr/include/GL/gl.h" 3 4
                     glCompressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data );

extern void 
# 1839 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1839 "/usr/include/GL/gl.h" 3 4
                     glGetCompressedTexImage( GLenum target, GLint lod, GLvoid *img );

extern void 
# 1841 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1841 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1d( GLenum target, GLdouble s );

extern void 
# 1843 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1843 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1dv( GLenum target, const GLdouble *v );

extern void 
# 1845 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1845 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1f( GLenum target, GLfloat s );

extern void 
# 1847 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1847 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1fv( GLenum target, const GLfloat *v );

extern void 
# 1849 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1849 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1i( GLenum target, GLint s );

extern void 
# 1851 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1851 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1iv( GLenum target, const GLint *v );

extern void 
# 1853 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1853 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1s( GLenum target, GLshort s );

extern void 
# 1855 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1855 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1sv( GLenum target, const GLshort *v );

extern void 
# 1857 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1857 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2d( GLenum target, GLdouble s, GLdouble t );

extern void 
# 1859 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1859 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2dv( GLenum target, const GLdouble *v );

extern void 
# 1861 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1861 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2f( GLenum target, GLfloat s, GLfloat t );

extern void 
# 1863 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1863 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2fv( GLenum target, const GLfloat *v );

extern void 
# 1865 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1865 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2i( GLenum target, GLint s, GLint t );

extern void 
# 1867 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1867 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2iv( GLenum target, const GLint *v );

extern void 
# 1869 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1869 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2s( GLenum target, GLshort s, GLshort t );

extern void 
# 1871 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1871 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2sv( GLenum target, const GLshort *v );

extern void 
# 1873 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1873 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3d( GLenum target, GLdouble s, GLdouble t, GLdouble r );

extern void 
# 1875 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1875 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3dv( GLenum target, const GLdouble *v );

extern void 
# 1877 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1877 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3f( GLenum target, GLfloat s, GLfloat t, GLfloat r );

extern void 
# 1879 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1879 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3fv( GLenum target, const GLfloat *v );

extern void 
# 1881 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1881 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3i( GLenum target, GLint s, GLint t, GLint r );

extern void 
# 1883 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1883 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3iv( GLenum target, const GLint *v );

extern void 
# 1885 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1885 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3s( GLenum target, GLshort s, GLshort t, GLshort r );

extern void 
# 1887 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1887 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3sv( GLenum target, const GLshort *v );

extern void 
# 1889 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1889 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4d( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );

extern void 
# 1891 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1891 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4dv( GLenum target, const GLdouble *v );

extern void 
# 1893 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1893 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4f( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );

extern void 
# 1895 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1895 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4fv( GLenum target, const GLfloat *v );

extern void 
# 1897 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1897 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4i( GLenum target, GLint s, GLint t, GLint r, GLint q );

extern void 
# 1899 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1899 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4iv( GLenum target, const GLint *v );

extern void 
# 1901 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1901 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4s( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );

extern void 
# 1903 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1903 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4sv( GLenum target, const GLshort *v );


extern void 
# 1906 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1906 "/usr/include/GL/gl.h" 3 4
                     glLoadTransposeMatrixd( const GLdouble m[16] );

extern void 
# 1908 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1908 "/usr/include/GL/gl.h" 3 4
                     glLoadTransposeMatrixf( const GLfloat m[16] );

extern void 
# 1910 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1910 "/usr/include/GL/gl.h" 3 4
                     glMultTransposeMatrixd( const GLdouble m[16] );

extern void 
# 1912 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1912 "/usr/include/GL/gl.h" 3 4
                     glMultTransposeMatrixf( const GLfloat m[16] );

extern void 
# 1914 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1914 "/usr/include/GL/gl.h" 3 4
                     glSampleCoverage( GLclampf value, GLboolean invert );


typedef void (
# 1917 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1917 "/usr/include/GL/gl.h" 3 4
             * PFNGLACTIVETEXTUREPROC) (GLenum texture);
typedef void (
# 1918 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1918 "/usr/include/GL/gl.h" 3 4
             * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
typedef void (
# 1919 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1919 "/usr/include/GL/gl.h" 3 4
             * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void (
# 1920 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1920 "/usr/include/GL/gl.h" 3 4
             * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void (
# 1921 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1921 "/usr/include/GL/gl.h" 3 4
             * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void (
# 1922 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1922 "/usr/include/GL/gl.h" 3 4
             * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void (
# 1923 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1923 "/usr/include/GL/gl.h" 3 4
             * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void (
# 1924 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1924 "/usr/include/GL/gl.h" 3 4
             * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void (
# 1925 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 1925 "/usr/include/GL/gl.h" 3 4
             * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);
# 1971 "/usr/include/GL/gl.h" 3 4
extern void 
# 1971 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1971 "/usr/include/GL/gl.h" 3 4
                     glActiveTextureARB(GLenum texture);
extern void 
# 1972 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1972 "/usr/include/GL/gl.h" 3 4
                     glClientActiveTextureARB(GLenum texture);
extern void 
# 1973 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1973 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1dARB(GLenum target, GLdouble s);
extern void 
# 1974 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1974 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1dvARB(GLenum target, const GLdouble *v);
extern void 
# 1975 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1975 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1fARB(GLenum target, GLfloat s);
extern void 
# 1976 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1976 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1fvARB(GLenum target, const GLfloat *v);
extern void 
# 1977 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1977 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1iARB(GLenum target, GLint s);
extern void 
# 1978 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1978 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1ivARB(GLenum target, const GLint *v);
extern void 
# 1979 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1979 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1sARB(GLenum target, GLshort s);
extern void 
# 1980 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1980 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord1svARB(GLenum target, const GLshort *v);
extern void 
# 1981 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1981 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
extern void 
# 1982 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1982 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2dvARB(GLenum target, const GLdouble *v);
extern void 
# 1983 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1983 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
extern void 
# 1984 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1984 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2fvARB(GLenum target, const GLfloat *v);
extern void 
# 1985 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1985 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);
extern void 
# 1986 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1986 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2ivARB(GLenum target, const GLint *v);
extern void 
# 1987 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1987 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
extern void 
# 1988 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1988 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord2svARB(GLenum target, const GLshort *v);
extern void 
# 1989 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1989 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
extern void 
# 1990 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1990 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3dvARB(GLenum target, const GLdouble *v);
extern void 
# 1991 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1991 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
extern void 
# 1992 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1992 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3fvARB(GLenum target, const GLfloat *v);
extern void 
# 1993 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1993 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
extern void 
# 1994 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1994 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3ivARB(GLenum target, const GLint *v);
extern void 
# 1995 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1995 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
extern void 
# 1996 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1996 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord3svARB(GLenum target, const GLshort *v);
extern void 
# 1997 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1997 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern void 
# 1998 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1998 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4dvARB(GLenum target, const GLdouble *v);
extern void 
# 1999 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 1999 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern void 
# 2000 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 2000 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4fvARB(GLenum target, const GLfloat *v);
extern void 
# 2001 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 2001 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
extern void 
# 2002 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 2002 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4ivARB(GLenum target, const GLint *v);
extern void 
# 2003 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 2003 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
extern void 
# 2004 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 2004 "/usr/include/GL/gl.h" 3 4
                     glMultiTexCoord4svARB(GLenum target, const GLshort *v);

typedef void (
# 2006 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2006 "/usr/include/GL/gl.h" 3 4
             * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
typedef void (
# 2007 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2007 "/usr/include/GL/gl.h" 3 4
             * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
typedef void (
# 2008 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2008 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
typedef void (
# 2009 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2009 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (
# 2010 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2010 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
typedef void (
# 2011 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2011 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (
# 2012 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2012 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
typedef void (
# 2013 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2013 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
typedef void (
# 2014 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2014 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
typedef void (
# 2015 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2015 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
typedef void (
# 2016 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2016 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
typedef void (
# 2017 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2017 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (
# 2018 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2018 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (
# 2019 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2019 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (
# 2020 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2020 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
typedef void (
# 2021 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2021 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
typedef void (
# 2022 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2022 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
typedef void (
# 2023 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2023 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
typedef void (
# 2024 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2024 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (
# 2025 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2025 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (
# 2026 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2026 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (
# 2027 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2027 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (
# 2028 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2028 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void (
# 2029 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2029 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
typedef void (
# 2030 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2030 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (
# 2031 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2031 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
typedef void (
# 2032 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2032 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (
# 2033 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2033 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (
# 2034 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2034 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (
# 2035 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2035 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (
# 2036 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2036 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (
# 2037 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2037 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
typedef void (
# 2038 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2038 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (
# 2039 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2039 "/usr/include/GL/gl.h" 3 4
             * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
# 2055 "/usr/include/GL/gl.h" 3 4
# 1 "/usr/include/GL/glext.h" 1 3 4




extern "C" {
# 367 "/usr/include/GL/glext.h" 3 4
typedef void (
# 367 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 367 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (
# 368 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 368 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void (
# 369 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 369 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
typedef void (
# 370 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 370 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
typedef void (
# 371 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 371 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
typedef void (
# 372 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 372 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
typedef void (
# 373 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 373 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
typedef void (
# 374 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 374 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDFPROC) (GLfloat coord);
typedef void (
# 375 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 375 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
typedef void (
# 376 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 376 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDDPROC) (GLdouble coord);
typedef void (
# 377 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 377 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
typedef void (
# 378 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 378 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 379 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 379 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (
# 380 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 380 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
typedef void (
# 381 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 381 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (
# 382 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 382 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
typedef void (
# 383 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 383 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (
# 384 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 384 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
typedef void (
# 385 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 385 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
typedef void (
# 386 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 386 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
typedef void (
# 387 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 387 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
typedef void (
# 388 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 388 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
typedef void (
# 389 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 389 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (
# 390 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 390 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
typedef void (
# 391 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 391 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
typedef void (
# 392 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 392 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
typedef void (
# 393 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 393 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
typedef void (
# 394 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 394 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
typedef void (
# 395 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 395 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 396 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 396 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
typedef void (
# 397 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 397 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
typedef void (
# 398 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 398 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
typedef void (
# 399 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 399 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
typedef void (
# 400 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 400 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
typedef void (
# 401 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 401 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2IVPROC) (const GLint *v);
typedef void (
# 402 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 402 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
typedef void (
# 403 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 403 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
typedef void (
# 404 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 404 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 405 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 405 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
typedef void (
# 406 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 406 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 407 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 407 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
typedef void (
# 408 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 408 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
typedef void (
# 409 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 409 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3IVPROC) (const GLint *v);
typedef void (
# 410 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 410 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
typedef void (
# 411 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 411 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3SVPROC) (const GLshort *v);
typedef void (
# 412 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 412 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (
# 413 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 413 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONPROC) (GLenum mode);
# 467 "/usr/include/GL/glext.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 468 "/usr/include/GL/glext.h" 2 3 4
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;
# 520 "/usr/include/GL/glext.h" 3 4
typedef void (
# 520 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 520 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
typedef void (
# 521 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 521 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
typedef GLboolean (
# 522 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 522 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISQUERYPROC) (GLuint id);
typedef void (
# 523 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 523 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
typedef void (
# 524 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 524 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDQUERYPROC) (GLenum target);
typedef void (
# 525 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 525 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 526 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 526 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
typedef void (
# 527 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 527 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
typedef void (
# 528 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 528 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
typedef void (
# 529 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 529 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
typedef void (
# 530 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 530 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
typedef GLboolean (
# 531 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 531 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISBUFFERPROC) (GLuint buffer);
typedef void (
# 532 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 532 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
typedef void (
# 533 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 533 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (
# 534 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 534 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
typedef void *(
# 535 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 535 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
typedef GLboolean (
# 536 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 536 "/usr/include/GL/glext.h" 3 4
                  * PFNGLUNMAPBUFFERPROC) (GLenum target);
typedef void (
# 537 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 537 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 538 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 538 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params);
# 564 "/usr/include/GL/glext.h" 3 4
typedef char GLchar;
# 649 "/usr/include/GL/glext.h" 3 4
typedef void (
# 649 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 649 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
typedef void (
# 650 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 650 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
typedef void (
# 651 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 651 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (
# 652 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 652 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (
# 653 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 653 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
typedef void (
# 654 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 654 "/usr/include/GL/glext.h" 3 4
             * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (
# 655 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 655 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
typedef void (
# 656 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 656 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPILESHADERPROC) (GLuint shader);
typedef GLuint (
# 657 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 657 "/usr/include/GL/glext.h" 3 4
               * PFNGLCREATEPROGRAMPROC) (void);
typedef GLuint (
# 658 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 658 "/usr/include/GL/glext.h" 3 4
               * PFNGLCREATESHADERPROC) (GLenum type);
typedef void (
# 659 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 659 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEPROGRAMPROC) (GLuint program);
typedef void (
# 660 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 660 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETESHADERPROC) (GLuint shader);
typedef void (
# 661 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 661 "/usr/include/GL/glext.h" 3 4
             * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (
# 662 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 662 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (
# 663 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 663 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (
# 664 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 664 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (
# 665 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 665 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (
# 666 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 666 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef GLint (
# 667 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 667 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
typedef void (
# 668 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 668 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
typedef void (
# 669 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 669 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (
# 670 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 670 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
typedef void (
# 671 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 671 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (
# 672 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 672 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef GLint (
# 673 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 673 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
typedef void (
# 674 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 674 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
typedef void (
# 675 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 675 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
typedef void (
# 676 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 676 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void (
# 677 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 677 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void (
# 678 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 678 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (
# 679 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 679 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer);
typedef GLboolean (
# 680 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 680 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISPROGRAMPROC) (GLuint program);
typedef GLboolean (
# 681 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 681 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISSHADERPROC) (GLuint shader);
typedef void (
# 682 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 682 "/usr/include/GL/glext.h" 3 4
             * PFNGLLINKPROGRAMPROC) (GLuint program);
typedef void (
# 683 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 683 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
typedef void (
# 684 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 684 "/usr/include/GL/glext.h" 3 4
             * PFNGLUSEPROGRAMPROC) (GLuint program);
typedef void (
# 685 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 685 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
typedef void (
# 686 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 686 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (
# 687 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 687 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (
# 688 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 688 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (
# 689 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 689 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
typedef void (
# 690 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 690 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
typedef void (
# 691 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 691 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (
# 692 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 692 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (
# 693 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 693 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 694 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 694 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 695 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 695 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 696 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 696 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 697 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 697 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 698 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 698 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 699 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 699 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 700 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 700 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 701 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 701 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 702 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 702 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 703 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 703 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 704 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 704 "/usr/include/GL/glext.h" 3 4
             * PFNGLVALIDATEPROGRAMPROC) (GLuint program);
typedef void (
# 705 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 705 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
typedef void (
# 706 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 706 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 707 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 707 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
typedef void (
# 708 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 708 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 709 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 709 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
typedef void (
# 710 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 710 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
typedef void (
# 711 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 711 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (
# 712 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 712 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 713 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 713 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (
# 714 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 714 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 715 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 715 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
typedef void (
# 716 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 716 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
typedef void (
# 717 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 717 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 718 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 718 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 719 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 719 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 720 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 720 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 721 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 721 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (
# 722 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 722 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
typedef void (
# 723 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 723 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
typedef void (
# 724 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 724 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
typedef void (
# 725 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 725 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
typedef void (
# 726 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 726 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (
# 727 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 727 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
typedef void (
# 728 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 728 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
typedef void (
# 729 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 729 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
typedef void (
# 730 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 730 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
typedef void (
# 731 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 731 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 732 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 732 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 733 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 733 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 734 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 734 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 735 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 735 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
typedef void (
# 736 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 736 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (
# 737 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 737 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
typedef void (
# 738 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 738 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
typedef void (
# 739 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 739 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
typedef void (
# 740 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 740 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
typedef void (
# 741 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 741 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
# 864 "/usr/include/GL/glext.h" 3 4
typedef void (
# 864 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 864 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 865 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 865 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 866 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 866 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 867 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 867 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 868 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 868 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 869 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 869 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
# 882 "/usr/include/GL/glext.h" 3 4
typedef unsigned short GLhalf;
# 1120 "/usr/include/GL/glext.h" 3 4
typedef void (
# 1120 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1120 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (
# 1121 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1121 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
typedef void (
# 1122 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1122 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
typedef void (
# 1123 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1123 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEIPROC) (GLenum target, GLuint index);
typedef void (
# 1124 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1124 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEIPROC) (GLenum target, GLuint index);
typedef GLboolean (
# 1125 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1125 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISENABLEDIPROC) (GLenum target, GLuint index);
typedef void (
# 1126 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1126 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
typedef void (
# 1127 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1127 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDTRANSFORMFEEDBACKPROC) (void);
typedef void (
# 1128 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1128 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (
# 1129 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1129 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (
# 1130 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1130 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void (
# 1131 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1131 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (
# 1132 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1132 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
typedef void (
# 1133 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1133 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
typedef void (
# 1134 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1134 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDCONDITIONALRENDERPROC) (void);
typedef void (
# 1135 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1135 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 1136 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1136 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (
# 1137 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1137 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
typedef void (
# 1138 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1138 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
typedef void (
# 1139 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1139 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
typedef void (
# 1140 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1140 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void (
# 1141 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1141 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (
# 1142 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1142 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
typedef void (
# 1143 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1143 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
typedef void (
# 1144 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1144 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (
# 1145 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1145 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (
# 1146 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1146 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
typedef void (
# 1147 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1147 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
typedef void (
# 1148 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1148 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
typedef void (
# 1149 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1149 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
typedef void (
# 1150 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1150 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
typedef void (
# 1151 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1151 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
typedef void (
# 1152 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1152 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
typedef void (
# 1153 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1153 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
typedef void (
# 1154 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1154 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
typedef void (
# 1155 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1155 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
typedef void (
# 1156 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1156 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
typedef void (
# 1157 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1157 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
typedef void (
# 1158 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1158 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
typedef void (
# 1159 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1159 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
typedef GLint (
# 1160 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 1160 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
typedef void (
# 1161 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1161 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
typedef void (
# 1162 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1162 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
typedef void (
# 1163 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1163 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (
# 1164 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1164 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (
# 1165 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1165 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1166 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1166 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1167 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1167 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1168 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1168 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1169 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1169 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (
# 1170 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1170 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
typedef void (
# 1171 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1171 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 1172 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1172 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
typedef void (
# 1173 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1173 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (
# 1174 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1174 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (
# 1175 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1175 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (
# 1176 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1176 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef const GLubyte *(
# 1177 "/usr/include/GL/glext.h"
                       __attribute__((ms_abi)) 
# 1177 "/usr/include/GL/glext.h" 3 4
                       * PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
typedef GLboolean (
# 1178 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1178 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
typedef void (
# 1179 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1179 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
typedef void (
# 1180 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1180 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
typedef void (
# 1181 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1181 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
typedef void (
# 1182 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1182 "/usr/include/GL/glext.h" 3 4
             * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 1183 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1183 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef GLboolean (
# 1184 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1184 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
typedef void (
# 1185 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1185 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
typedef void (
# 1186 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1186 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
typedef void (
# 1187 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1187 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
typedef GLenum (
# 1188 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 1188 "/usr/include/GL/glext.h" 3 4
               * PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
typedef void (
# 1189 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1189 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (
# 1190 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1190 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (
# 1191 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1191 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (
# 1192 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1192 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (
# 1193 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1193 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void (
# 1194 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1194 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENERATEMIPMAPPROC) (GLenum target);
typedef void (
# 1195 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1195 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (
# 1196 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1196 "/usr/include/GL/glext.h" 3 4
             * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 1197 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1197 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void *(
# 1198 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 1198 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (
# 1199 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1199 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (
# 1200 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1200 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDVERTEXARRAYPROC) (GLuint array);
typedef void (
# 1201 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1201 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
typedef void (
# 1202 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1202 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
typedef GLboolean (
# 1203 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1203 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISVERTEXARRAYPROC) (GLuint array);
# 1355 "/usr/include/GL/glext.h" 3 4
typedef void (
# 1355 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1355 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (
# 1356 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1356 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
typedef void (
# 1357 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1357 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);
typedef void (
# 1358 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1358 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);
typedef void (
# 1359 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1359 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (
# 1360 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1360 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
typedef void (
# 1361 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1361 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef void (
# 1362 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1362 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
typedef GLuint (
# 1363 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 1363 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
typedef void (
# 1364 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1364 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef void (
# 1365 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1365 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void (
# 1366 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1366 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
# 1385 "/usr/include/GL/glext.h" 3 4
typedef struct __GLsync *GLsync;
# 1423 "/usr/include/GL/glext.h" 3 4
typedef uint64_t GLuint64;
typedef int64_t GLint64;
# 1489 "/usr/include/GL/glext.h" 3 4
typedef void (
# 1489 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1489 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (
# 1490 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1490 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (
# 1491 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1491 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
typedef void (
# 1492 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1492 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
typedef void (
# 1493 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1493 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
typedef GLsync (
# 1494 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 1494 "/usr/include/GL/glext.h" 3 4
               * PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);
typedef GLboolean (
# 1495 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1495 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISSYNCPROC) (GLsync sync);
typedef void (
# 1496 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1496 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETESYNCPROC) (GLsync sync);
typedef GLenum (
# 1497 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 1497 "/usr/include/GL/glext.h" 3 4
               * PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (
# 1498 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1498 "/usr/include/GL/glext.h" 3 4
             * PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (
# 1499 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1499 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data);
typedef void (
# 1500 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1500 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
typedef void (
# 1501 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1501 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
typedef void (
# 1502 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1502 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
typedef void (
# 1503 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1503 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (
# 1504 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1504 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (
# 1505 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1505 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (
# 1506 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1506 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
typedef void (
# 1507 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1507 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask);
# 1549 "/usr/include/GL/glext.h" 3 4
typedef void (
# 1549 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1549 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
typedef GLint (
# 1550 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 1550 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);
typedef void (
# 1551 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1551 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);
typedef void (
# 1552 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1552 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);
typedef GLboolean (
# 1553 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1553 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISSAMPLERPROC) (GLuint sampler);
typedef void (
# 1554 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1554 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
typedef void (
# 1555 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1555 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
typedef void (
# 1556 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1556 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
typedef void (
# 1557 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1557 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
typedef void (
# 1558 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1558 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);
typedef void (
# 1559 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1559 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
typedef void (
# 1560 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1560 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);
typedef void (
# 1561 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1561 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);
typedef void (
# 1562 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1562 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);
typedef void (
# 1563 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1563 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);
typedef void (
# 1564 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1564 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);
typedef void (
# 1565 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1565 "/usr/include/GL/glext.h" 3 4
             * PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
typedef void (
# 1566 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1566 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);
typedef void (
# 1567 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1567 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);
typedef void (
# 1568 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1568 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);
typedef void (
# 1569 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1569 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (
# 1570 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1570 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (
# 1571 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1571 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (
# 1572 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1572 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (
# 1573 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1573 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (
# 1574 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1574 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (
# 1575 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1575 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (
# 1576 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1576 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (
# 1577 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1577 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);
typedef void (
# 1578 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1578 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);
typedef void (
# 1579 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1579 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);
typedef void (
# 1580 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1580 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);
typedef void (
# 1581 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1581 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);
typedef void (
# 1582 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1582 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);
typedef void (
# 1583 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1583 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);
typedef void (
# 1584 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1584 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);
typedef void (
# 1585 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1585 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);
typedef void (
# 1586 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1586 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);
typedef void (
# 1587 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1587 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);
typedef void (
# 1588 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1588 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);
typedef void (
# 1589 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1589 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);
typedef void (
# 1590 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1590 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);
typedef void (
# 1591 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1591 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (
# 1592 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1592 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void (
# 1593 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1593 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (
# 1594 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1594 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void (
# 1595 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1595 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (
# 1596 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1596 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void (
# 1597 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1597 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (
# 1598 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1598 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void (
# 1599 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1599 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);
typedef void (
# 1600 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1600 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);
typedef void (
# 1601 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1601 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void (
# 1602 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1602 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);
typedef void (
# 1603 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1603 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);
typedef void (
# 1604 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1604 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);
typedef void (
# 1605 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1605 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void (
# 1606 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1606 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);
# 1748 "/usr/include/GL/glext.h" 3 4
typedef void (
# 1748 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1748 "/usr/include/GL/glext.h" 3 4
             * PFNGLMINSAMPLESHADINGPROC) (GLfloat value);
typedef void (
# 1749 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1749 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
typedef void (
# 1750 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1750 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (
# 1751 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1751 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (
# 1752 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1752 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (
# 1753 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1753 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);
typedef void (
# 1754 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1754 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);
typedef void (
# 1755 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1755 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
typedef void (
# 1756 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1756 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
typedef void (
# 1757 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1757 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 1758 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1758 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 1759 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1759 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1760 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1760 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1761 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1761 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1762 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1762 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1763 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1763 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1764 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1764 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1765 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1765 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1766 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1766 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1767 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1767 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1768 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1768 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1769 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1769 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1770 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1770 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1771 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1771 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1772 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1772 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);
typedef GLint (
# 1773 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 1773 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);
typedef GLuint (
# 1774 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 1774 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);
typedef void (
# 1775 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1775 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
typedef void (
# 1776 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1776 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void (
# 1777 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1777 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void (
# 1778 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1778 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);
typedef void (
# 1779 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1779 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);
typedef void (
# 1780 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1780 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
typedef void (
# 1781 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1781 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
typedef void (
# 1782 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1782 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);
typedef void (
# 1783 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1783 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
typedef void (
# 1784 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1784 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);
typedef void (
# 1785 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1785 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
typedef GLboolean (
# 1786 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1786 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
typedef void (
# 1787 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1787 "/usr/include/GL/glext.h" 3 4
             * PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);
typedef void (
# 1788 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1788 "/usr/include/GL/glext.h" 3 4
             * PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);
typedef void (
# 1789 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1789 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
typedef void (
# 1790 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1790 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
typedef void (
# 1791 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1791 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
typedef void (
# 1792 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1792 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
typedef void (
# 1793 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1793 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
# 1881 "/usr/include/GL/glext.h" 3 4
typedef void (
# 1881 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1881 "/usr/include/GL/glext.h" 3 4
             * PFNGLRELEASESHADERCOMPILERPROC) (void);
typedef void (
# 1882 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1882 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
typedef void (
# 1883 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1883 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
typedef void (
# 1884 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1884 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);
typedef void (
# 1885 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1885 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARDEPTHFPROC) (GLfloat d);
typedef void (
# 1886 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1886 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
typedef void (
# 1887 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1887 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (
# 1888 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1888 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
typedef void (
# 1889 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1889 "/usr/include/GL/glext.h" 3 4
             * PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (
# 1890 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1890 "/usr/include/GL/glext.h" 3 4
             * PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
typedef GLuint (
# 1891 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 1891 "/usr/include/GL/glext.h" 3 4
               * PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings);
typedef void (
# 1892 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1892 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (
# 1893 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1893 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);
typedef void (
# 1894 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1894 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
typedef GLboolean (
# 1895 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 1895 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (
# 1896 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1896 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);
typedef void (
# 1897 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1897 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);
typedef void (
# 1898 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1898 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 1899 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1899 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);
typedef void (
# 1900 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1900 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 1901 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1901 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);
typedef void (
# 1902 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1902 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1903 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1903 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);
typedef void (
# 1904 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1904 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1905 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1905 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (
# 1906 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1906 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 1907 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1907 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (
# 1908 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1908 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 1909 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1909 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (
# 1910 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1910 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1911 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1911 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (
# 1912 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1912 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1913 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1913 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (
# 1914 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1914 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 1915 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1915 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (
# 1916 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1916 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 1917 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1917 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (
# 1918 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1918 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1919 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1919 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (
# 1920 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1920 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1921 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1921 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (
# 1922 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1922 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 1923 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1923 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (
# 1924 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1924 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 1925 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1925 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (
# 1926 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1926 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 1927 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1927 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (
# 1928 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1928 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 1929 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1929 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1930 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1930 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1931 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1931 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1932 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1932 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1933 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1933 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1934 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1934 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1935 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1935 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1936 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1936 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1937 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1937 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1938 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1938 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1939 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1939 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1940 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1940 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 1941 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1941 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1942 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1942 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1943 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1943 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1944 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1944 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1945 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1945 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1946 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1946 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 1947 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1947 "/usr/include/GL/glext.h" 3 4
             * PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (
# 1948 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1948 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (
# 1949 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1949 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
typedef void (
# 1950 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1950 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (
# 1951 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1951 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 1952 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1952 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 1953 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1953 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 1954 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1954 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 1955 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1955 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 1956 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1956 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 1957 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1957 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 1958 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1958 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void (
# 1959 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1959 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);
typedef void (
# 1960 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1960 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (
# 1961 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1961 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 1962 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1962 "/usr/include/GL/glext.h" 3 4
             * PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);
typedef void (
# 1963 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1963 "/usr/include/GL/glext.h" 3 4
             * PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (
# 1964 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1964 "/usr/include/GL/glext.h" 3 4
             * PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);
typedef void (
# 1965 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1965 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);
typedef void (
# 1966 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1966 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);
typedef void (
# 1967 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1967 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);
typedef void (
# 1968 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 1968 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);
# 2175 "/usr/include/GL/glext.h" 3 4
typedef void (
# 2175 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2175 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (
# 2176 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2176 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
typedef void (
# 2177 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2177 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (
# 2178 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2178 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
typedef void (
# 2179 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2179 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
typedef void (
# 2180 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2180 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (
# 2181 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2181 "/usr/include/GL/glext.h" 3 4
             * PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);
typedef void (
# 2182 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2182 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (
# 2183 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2183 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 2184 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2184 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (
# 2185 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2185 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);
typedef void (
# 2186 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2186 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
# 2205 "/usr/include/GL/glext.h" 3 4
typedef void (
# 2205 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2205 "/usr/include/GL/glext.h" 3 4
                       *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
# 2465 "/usr/include/GL/glext.h" 3 4
typedef void (
# 2465 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2465 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (
# 2466 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2466 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (
# 2467 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2467 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (
# 2468 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2468 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);
typedef void (
# 2469 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2469 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (
# 2470 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2470 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
typedef void (
# 2471 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2471 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 2472 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2472 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
typedef void (
# 2473 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2473 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void (
# 2474 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2474 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);
typedef void (
# 2475 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2475 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (
# 2476 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2476 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);
typedef void (
# 2477 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2477 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);
typedef void (
# 2478 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2478 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 2479 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2479 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void (
# 2480 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2480 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void (
# 2481 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2481 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
typedef GLuint (
# 2482 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 2482 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef void (
# 2483 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2483 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (
# 2484 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2484 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
typedef GLint (
# 2485 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 2485 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef GLint (
# 2486 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 2486 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef void (
# 2487 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2487 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (
# 2488 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2488 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (
# 2489 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2489 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (
# 2490 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2490 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (
# 2491 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2491 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (
# 2492 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2492 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (
# 2493 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2493 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (
# 2494 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2494 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (
# 2495 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2495 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (
# 2496 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2496 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);
typedef void (
# 2497 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2497 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);
typedef void (
# 2498 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2498 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (
# 2499 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2499 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void (
# 2500 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2500 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
typedef GLuint (
# 2501 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 2501 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
typedef void (
# 2502 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2502 "/usr/include/GL/glext.h" 3 4
             * PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
typedef void (
# 2503 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2503 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOPDEBUGGROUPPROC) (void);
typedef void (
# 2504 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2504 "/usr/include/GL/glext.h" 3 4
             * PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
typedef void (
# 2505 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2505 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void (
# 2506 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2506 "/usr/include/GL/glext.h" 3 4
             * PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
typedef void (
# 2507 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2507 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
# 2576 "/usr/include/GL/glext.h" 3 4
typedef void (
# 2576 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2576 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (
# 2577 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2577 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
typedef void (
# 2578 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2578 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
typedef void (
# 2579 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2579 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
typedef void (
# 2580 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2580 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
typedef void (
# 2581 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2581 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
typedef void (
# 2582 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2582 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers);
typedef void (
# 2583 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2583 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
typedef void (
# 2584 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2584 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
# 2622 "/usr/include/GL/glext.h" 3 4
typedef void (
# 2622 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2622 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth);
typedef void (
# 2623 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2623 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
typedef void (
# 2624 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2624 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer);
typedef void (
# 2625 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2625 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (
# 2626 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2626 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint *param);
typedef void (
# 2627 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2627 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint *param);
typedef void (
# 2628 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2628 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
typedef void (
# 2629 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2629 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint *buffers);
typedef void (
# 2630 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2630 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (
# 2631 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2631 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (
# 2632 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2632 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (
# 2633 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2633 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (
# 2634 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2634 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (
# 2635 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2635 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void *(
# 2636 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 2636 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access);
typedef void *(
# 2637 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 2637 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef GLboolean (
# 2638 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 2638 "/usr/include/GL/glext.h" 3 4
                  * PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer);
typedef void (
# 2639 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2639 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (
# 2640 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2640 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint *params);
typedef void (
# 2641 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2641 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64 *params);
typedef void (
# 2642 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2642 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void **params);
typedef void (
# 2643 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2643 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (
# 2644 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2644 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
typedef void (
# 2645 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2645 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (
# 2646 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2646 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (
# 2647 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2647 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (
# 2648 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2648 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (
# 2649 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2649 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum buf);
typedef void (
# 2650 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2650 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (
# 2651 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2651 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum src);
typedef void (
# 2652 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2652 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
typedef void (
# 2653 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2653 "/usr/include/GL/glext.h" 3 4
             * PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 2654 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2654 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (
# 2655 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2655 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (
# 2656 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2656 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (
# 2657 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2657 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (
# 2658 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2658 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (
# 2659 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 2659 "/usr/include/GL/glext.h" 3 4
               * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target);
typedef void (
# 2660 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2660 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint *param);
typedef void (
# 2661 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2661 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (
# 2662 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2662 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
typedef void (
# 2663 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2663 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 2664 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2664 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 2665 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2665 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (
# 2666 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2666 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint *textures);
typedef void (
# 2667 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2667 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (
# 2668 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2668 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (
# 2669 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2669 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (
# 2670 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2670 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 2671 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2671 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (
# 2672 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2672 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (
# 2673 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2673 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (
# 2674 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2674 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (
# 2675 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2675 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (
# 2676 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2676 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (
# 2677 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2677 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (
# 2678 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2678 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (
# 2679 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2679 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (
# 2680 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2680 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (
# 2681 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2681 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 2682 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2682 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 2683 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2683 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param);
typedef void (
# 2684 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2684 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat *param);
typedef void (
# 2685 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2685 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param);
typedef void (
# 2686 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2686 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint *params);
typedef void (
# 2687 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2687 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint *params);
typedef void (
# 2688 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2688 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint *param);
typedef void (
# 2689 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2689 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture);
typedef void (
# 2690 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2690 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture);
typedef void (
# 2691 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2691 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (
# 2692 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2692 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
typedef void (
# 2693 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2693 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat *params);
typedef void (
# 2694 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2694 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint *params);
typedef void (
# 2695 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2695 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat *params);
typedef void (
# 2696 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2696 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint *params);
typedef void (
# 2697 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2697 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint *params);
typedef void (
# 2698 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2698 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint *params);
typedef void (
# 2699 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2699 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
typedef void (
# 2700 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2700 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (
# 2701 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2701 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (
# 2702 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2702 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer);
typedef void (
# 2703 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2703 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (
# 2704 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2704 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
typedef void (
# 2705 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2705 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (
# 2706 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2706 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (
# 2707 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2707 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (
# 2708 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2708 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (
# 2709 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2709 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (
# 2710 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2710 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint *param);
typedef void (
# 2711 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2711 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (
# 2712 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2712 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
typedef void (
# 2713 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2713 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint *samplers);
typedef void (
# 2714 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2714 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
typedef void (
# 2715 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2715 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint *ids);
typedef void (
# 2716 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2716 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (
# 2717 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2717 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (
# 2718 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2718 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (
# 2719 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2719 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (
# 2720 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2720 "/usr/include/GL/glext.h" 3 4
             * PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);
typedef void (
# 2721 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2721 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (
# 2722 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2722 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
typedef GLenum (
# 2723 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 2723 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETGRAPHICSRESETSTATUSPROC) (void);
typedef void (
# 2724 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2724 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLsizei bufSize, void *pixels);
typedef void (
# 2725 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2725 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (
# 2726 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2726 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMDVPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
typedef void (
# 2727 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2727 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void (
# 2728 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2728 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void (
# 2729 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2729 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void (
# 2730 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2730 "/usr/include/GL/glext.h" 3 4
             * PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void (
# 2731 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2731 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMAPDVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
typedef void (
# 2732 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2732 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMAPFVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
typedef void (
# 2733 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2733 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMAPIVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
typedef void (
# 2734 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2734 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPIXELMAPFVPROC) (GLenum map, GLsizei bufSize, GLfloat *values);
typedef void (
# 2735 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2735 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPIXELMAPUIVPROC) (GLenum map, GLsizei bufSize, GLuint *values);
typedef void (
# 2736 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2736 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPIXELMAPUSVPROC) (GLenum map, GLsizei bufSize, GLushort *values);
typedef void (
# 2737 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2737 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPOLYGONSTIPPLEPROC) (GLsizei bufSize, GLubyte *pattern);
typedef void (
# 2738 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2738 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
typedef void (
# 2739 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2739 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
typedef void (
# 2740 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2740 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
typedef void (
# 2741 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2741 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
typedef void (
# 2742 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2742 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
typedef void (
# 2743 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2743 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREBARRIERPROC) (void);
# 2894 "/usr/include/GL/glext.h" 3 4
typedef void (
# 2894 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2894 "/usr/include/GL/glext.h" 3 4
             * PFNGLSPECIALIZESHADERPROC) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
typedef void (
# 2895 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2895 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (
# 2896 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2896 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (
# 2897 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2897 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOLYGONOFFSETCLAMPPROC) (GLfloat factor, GLfloat units, GLfloat clamp);
# 2919 "/usr/include/GL/glext.h" 3 4
typedef void (
# 2919 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2919 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
# 2939 "/usr/include/GL/glext.h" 3 4
typedef uint64_t GLuint64EXT;

typedef GLuint64 (
# 2941 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 2941 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);
typedef GLuint64 (
# 2942 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 2942 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);
typedef void (
# 2943 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2943 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (
# 2944 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2944 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef GLuint64 (
# 2945 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 2945 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (
# 2946 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2946 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);
typedef void (
# 2947 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2947 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef void (
# 2948 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2948 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);
typedef void (
# 2949 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2949 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 2950 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2950 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (
# 2951 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2951 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean (
# 2952 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 2952 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef GLboolean (
# 2953 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 2953 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (
# 2954 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2954 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);
typedef void (
# 2955 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2955 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v);
typedef void (
# 2956 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 2956 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
# 2987 "/usr/include/GL/glext.h" 3 4
struct _cl_context;
struct _cl_event;


typedef GLsync (
# 2991 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 2991 "/usr/include/GL/glext.h" 3 4
               * PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
# 3016 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3016 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3016 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
# 3040 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3040 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3040 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
# 3068 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3068 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3068 "/usr/include/GL/glext.h" 3 4
                       *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
# 3091 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3091 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3091 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (
# 3092 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3092 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void (
# 3093 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3093 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);
typedef GLuint (
# 3094 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 3094 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
# 3147 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3147 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3147 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);







typedef void (
# 3155 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3155 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
typedef void (
# 3156 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3156 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (
# 3157 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3157 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (
# 3158 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3158 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
# 3177 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3177 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3177 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (
# 3178 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3178 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
# 3285 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3285 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3285 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (
# 3286 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3286 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
typedef void (
# 3287 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3287 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
typedef void (
# 3288 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3288 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
typedef void (
# 3289 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3289 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 3290 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3290 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
typedef void (
# 3291 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3291 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 3292 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3292 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
typedef void (
# 3293 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3293 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 3294 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3294 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
typedef void (
# 3295 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3295 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 3296 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3296 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
typedef void (
# 3297 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3297 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
typedef void (
# 3298 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3298 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
typedef void (
# 3299 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3299 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
typedef void (
# 3300 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3300 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
typedef void (
# 3301 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3301 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 3302 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3302 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string);
typedef GLboolean (
# 3303 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 3303 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISPROGRAMARBPROC) (GLuint program);
# 3374 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3374 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3374 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
typedef void (
# 3375 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3375 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (
# 3376 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3376 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (
# 3377 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3377 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
# 3398 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3398 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3398 "/usr/include/GL/glext.h" 3 4
             * PFNGLSPECIALIZESHADERARBPROC) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
# 3421 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3421 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3421 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1I64ARBPROC) (GLint location, GLint64 x);
typedef void (
# 3422 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3422 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2I64ARBPROC) (GLint location, GLint64 x, GLint64 y);
typedef void (
# 3423 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3423 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (
# 3424 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3424 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (
# 3425 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3425 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3426 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3426 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3427 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3427 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3428 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3428 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3429 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3429 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UI64ARBPROC) (GLint location, GLuint64 x);
typedef void (
# 3430 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3430 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y);
typedef void (
# 3431 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3431 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (
# 3432 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3432 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (
# 3433 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3433 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 3434 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3434 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 3435 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3435 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 3436 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3436 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 3437 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3437 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMI64VARBPROC) (GLuint program, GLint location, GLint64 *params);
typedef void (
# 3438 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3438 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLuint64 *params);
typedef void (
# 3439 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3439 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
typedef void (
# 3440 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3440 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
typedef void (
# 3441 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3441 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1I64ARBPROC) (GLuint program, GLint location, GLint64 x);
typedef void (
# 3442 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3442 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (
# 3443 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3443 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (
# 3444 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3444 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (
# 3445 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3445 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3446 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3446 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3447 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3447 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3448 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3448 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (
# 3449 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3449 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UI64ARBPROC) (GLuint program, GLint location, GLuint64 x);
typedef void (
# 3450 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3450 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (
# 3451 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3451 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (
# 3452 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3452 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (
# 3453 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3453 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 3454 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3454 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 3455 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3455 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 3456 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3456 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
# 3499 "/usr/include/GL/glext.h" 3 4
typedef unsigned short GLhalfARB;
# 3645 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3645 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3645 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (
# 3646 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3646 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
# 3656 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3656 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3656 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
# 3695 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3695 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3695 "/usr/include/GL/glext.h" 3 4
             * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
typedef void (
# 3696 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3696 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
typedef void (
# 3697 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3697 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
typedef void (
# 3698 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3698 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
typedef void (
# 3699 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3699 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
# 3728 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3728 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3728 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLECOVERAGEARBPROC) (GLfloat value, GLboolean invert);
# 3850 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3850 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3850 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);
typedef void (
# 3851 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3851 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);
typedef GLboolean (
# 3852 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 3852 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISQUERYARBPROC) (GLuint id);
typedef void (
# 3853 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3853 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
typedef void (
# 3854 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3854 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDQUERYARBPROC) (GLenum target);
typedef void (
# 3855 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3855 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 3856 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3856 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);
typedef void (
# 3857 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3857 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);
# 3878 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3878 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3878 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (GLuint count);
# 3912 "/usr/include/GL/glext.h" 3 4
typedef void (
# 3912 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3912 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
typedef void (
# 3913 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3913 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
# 3959 "/usr/include/GL/glext.h" 3 4
typedef GLenum (
# 3959 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 3959 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
typedef void (
# 3960 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3960 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
typedef void (
# 3961 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3961 "/usr/include/GL/glext.h" 3 4
             * PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void (
# 3962 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3962 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img);
typedef void (
# 3963 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3963 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void (
# 3964 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3964 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void (
# 3965 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3965 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void (
# 3966 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3966 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
typedef void (
# 3967 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3967 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
typedef void (
# 3968 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3968 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
typedef void (
# 3969 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3969 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
typedef void (
# 3970 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3970 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values);
typedef void (
# 3971 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3971 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values);
typedef void (
# 3972 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3972 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values);
typedef void (
# 3973 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3973 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern);
typedef void (
# 3974 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3974 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
typedef void (
# 3975 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3975 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
typedef void (
# 3976 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3976 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
typedef void (
# 3977 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3977 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
typedef void (
# 3978 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 3978 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
# 4017 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4017 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4017 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void (
# 4018 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4018 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (
# 4019 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4019 "/usr/include/GL/glext.h" 3 4
             * PFNGLEVALUATEDEPTHVALUESARBPROC) (void);
# 4031 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4031 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4031 "/usr/include/GL/glext.h" 3 4
             * PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);
# 4099 "/usr/include/GL/glext.h" 3 4
typedef unsigned int GLhandleARB;

typedef char GLcharARB;
# 4136 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4136 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4136 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
typedef GLhandleARB (
# 4137 "/usr/include/GL/glext.h"
                    __attribute__((ms_abi)) 
# 4137 "/usr/include/GL/glext.h" 3 4
                    * PFNGLGETHANDLEARBPROC) (GLenum pname);
typedef void (
# 4138 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4138 "/usr/include/GL/glext.h" 3 4
             * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
typedef GLhandleARB (
# 4139 "/usr/include/GL/glext.h"
                    __attribute__((ms_abi)) 
# 4139 "/usr/include/GL/glext.h" 3 4
                    * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
typedef void (
# 4140 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4140 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length);
typedef void (
# 4141 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4141 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
typedef GLhandleARB (
# 4142 "/usr/include/GL/glext.h"
                    __attribute__((ms_abi)) 
# 4142 "/usr/include/GL/glext.h" 3 4
                    * PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
typedef void (
# 4143 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4143 "/usr/include/GL/glext.h" 3 4
             * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
typedef void (
# 4144 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4144 "/usr/include/GL/glext.h" 3 4
             * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
typedef void (
# 4145 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4145 "/usr/include/GL/glext.h" 3 4
             * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
typedef void (
# 4146 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4146 "/usr/include/GL/glext.h" 3 4
             * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
typedef void (
# 4147 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4147 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
typedef void (
# 4148 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4148 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (
# 4149 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4149 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (
# 4150 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4150 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (
# 4151 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4151 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
typedef void (
# 4152 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4152 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
typedef void (
# 4153 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4153 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (
# 4154 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4154 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (
# 4155 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4155 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 4156 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4156 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 4157 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4157 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 4158 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4158 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 4159 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4159 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 4160 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4160 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 4161 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4161 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 4162 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4162 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void (
# 4163 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4163 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 4164 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4164 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 4165 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4165 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 4166 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4166 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
typedef void (
# 4167 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4167 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
typedef void (
# 4168 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4168 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
typedef void (
# 4169 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4169 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
typedef GLint (
# 4170 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 4170 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
typedef void (
# 4171 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4171 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
typedef void (
# 4172 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4172 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
typedef void (
# 4173 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4173 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
typedef void (
# 4174 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4174 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
# 4260 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4260 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4260 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
typedef void (
# 4261 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4261 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
typedef void (
# 4262 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4262 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
typedef GLboolean (
# 4263 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 4263 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
typedef void (
# 4264 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4264 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void (
# 4265 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4265 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
# 4296 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4296 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4296 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (
# 4297 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4297 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (
# 4298 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4298 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
# 4319 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4319 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4319 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
# 4365 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4365 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4365 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
# 4392 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4392 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4392 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (
# 4393 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4393 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (
# 4394 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4394 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (
# 4395 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4395 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (
# 4396 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4396 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (
# 4397 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4397 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (
# 4398 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4398 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, void *img);
# 4619 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4619 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4619 "/usr/include/GL/glext.h" 3 4
             * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
typedef void (
# 4620 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4620 "/usr/include/GL/glext.h" 3 4
             * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
typedef void (
# 4621 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4621 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
typedef void (
# 4622 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4622 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
# 4695 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4695 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4695 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
typedef void (
# 4696 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4696 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
typedef void (
# 4697 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4697 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
typedef void (
# 4698 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4698 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
typedef void (
# 4699 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4699 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
typedef void (
# 4700 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4700 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
typedef void (
# 4701 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4701 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
typedef void (
# 4702 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4702 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
typedef void (
# 4703 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4703 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 4704 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4704 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXBLENDARBPROC) (GLint count);
# 4721 "/usr/include/GL/glext.h" 3 4
typedef ptrdiff_t GLsizeiptrARB;
typedef ptrdiff_t GLintptrARB;
# 4754 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4754 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4754 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
typedef void (
# 4755 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4755 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
typedef void (
# 4756 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4756 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
typedef GLboolean (
# 4757 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 4757 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISBUFFERARBPROC) (GLuint buffer);
typedef void (
# 4758 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4758 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
typedef void (
# 4759 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4759 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
typedef void (
# 4760 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4760 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
typedef void *(
# 4761 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 4761 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
typedef GLboolean (
# 4762 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 4762 "/usr/include/GL/glext.h" 3 4
                  * PFNGLUNMAPBUFFERARBPROC) (GLenum target);
typedef void (
# 4763 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4763 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 4764 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4764 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void **params);
# 4798 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4798 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4798 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
typedef void (
# 4799 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4799 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
typedef void (
# 4800 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4800 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
typedef void (
# 4801 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4801 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
typedef void (
# 4802 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4802 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
typedef void (
# 4803 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4803 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
typedef void (
# 4804 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4804 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (
# 4805 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4805 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
typedef void (
# 4806 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4806 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (
# 4807 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4807 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
typedef void (
# 4808 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4808 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
typedef void (
# 4809 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4809 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
typedef void (
# 4810 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4810 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 4811 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4811 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
typedef void (
# 4812 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4812 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 4813 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4813 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
typedef void (
# 4814 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4814 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (
# 4815 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4815 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
typedef void (
# 4816 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4816 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
typedef void (
# 4817 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4817 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
typedef void (
# 4818 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4818 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
typedef void (
# 4819 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4819 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (
# 4820 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4820 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
typedef void (
# 4821 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4821 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
typedef void (
# 4822 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4822 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
typedef void (
# 4823 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4823 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
typedef void (
# 4824 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4824 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 4825 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4825 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
typedef void (
# 4826 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4826 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 4827 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4827 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
typedef void (
# 4828 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4828 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
typedef void (
# 4829 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4829 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (
# 4830 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4830 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
typedef void (
# 4831 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4831 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
typedef void (
# 4832 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4832 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
typedef void (
# 4833 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4833 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
typedef void (
# 4834 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4834 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
typedef void (
# 4835 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4835 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void (
# 4836 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4836 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void (
# 4837 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4837 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void (
# 4838 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4838 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void (
# 4839 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4839 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (
# 4840 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4840 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void **pointer);
# 4897 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4897 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4897 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
typedef void (
# 4898 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4898 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
typedef GLint (
# 4899 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 4899 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
# 4921 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4921 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4921 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
typedef void (
# 4922 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4922 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
typedef void (
# 4923 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4923 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
typedef void (
# 4924 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4924 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
typedef void (
# 4925 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4925 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
typedef void (
# 4926 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4926 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
typedef void (
# 4927 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4927 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
typedef void (
# 4928 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4928 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
typedef void (
# 4929 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4929 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 4930 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4930 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
typedef void (
# 4931 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4931 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 4932 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4932 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
typedef void (
# 4933 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4933 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
typedef void (
# 4934 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4934 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
typedef void (
# 4935 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4935 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
typedef void (
# 4936 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4936 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);
# 4974 "/usr/include/GL/glext.h" 3 4
typedef void (
# 4974 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 4974 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDBARRIERKHRPROC) (void);
# 5002 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5002 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5002 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAXSHADERCOMPILERTHREADSKHRPROC) (GLuint count);
# 5059 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5059 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5059 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD1BOESPROC) (GLenum texture, GLbyte s);
typedef void (
# 5060 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5060 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD1BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void (
# 5061 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5061 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD2BOESPROC) (GLenum texture, GLbyte s, GLbyte t);
typedef void (
# 5062 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5062 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD2BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void (
# 5063 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5063 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD3BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r);
typedef void (
# 5064 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5064 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD3BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void (
# 5065 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5065 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD4BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (
# 5066 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5066 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD4BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void (
# 5067 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5067 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD1BOESPROC) (GLbyte s);
typedef void (
# 5068 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5068 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD1BVOESPROC) (const GLbyte *coords);
typedef void (
# 5069 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5069 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2BOESPROC) (GLbyte s, GLbyte t);
typedef void (
# 5070 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5070 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2BVOESPROC) (const GLbyte *coords);
typedef void (
# 5071 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5071 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD3BOESPROC) (GLbyte s, GLbyte t, GLbyte r);
typedef void (
# 5072 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5072 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD3BVOESPROC) (const GLbyte *coords);
typedef void (
# 5073 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5073 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4BOESPROC) (GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (
# 5074 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5074 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4BVOESPROC) (const GLbyte *coords);
typedef void (
# 5075 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5075 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX2BOESPROC) (GLbyte x, GLbyte y);
typedef void (
# 5076 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5076 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX2BVOESPROC) (const GLbyte *coords);
typedef void (
# 5077 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5077 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX3BOESPROC) (GLbyte x, GLbyte y, GLbyte z);
typedef void (
# 5078 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5078 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX3BVOESPROC) (const GLbyte *coords);
typedef void (
# 5079 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5079 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX4BOESPROC) (GLbyte x, GLbyte y, GLbyte z, GLbyte w);
typedef void (
# 5080 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5080 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX4BVOESPROC) (const GLbyte *coords);
# 5123 "/usr/include/GL/glext.h" 3 4
typedef GLint GLfixed;

typedef void (
# 5125 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5125 "/usr/include/GL/glext.h" 3 4
             * PFNGLALPHAFUNCXOESPROC) (GLenum func, GLfixed ref);
typedef void (
# 5126 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5126 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (
# 5127 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5127 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARDEPTHXOESPROC) (GLfixed depth);
typedef void (
# 5128 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5128 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLIPPLANEXOESPROC) (GLenum plane, const GLfixed *equation);
typedef void (
# 5129 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5129 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4XOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (
# 5130 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5130 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHRANGEXOESPROC) (GLfixed n, GLfixed f);
typedef void (
# 5131 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5131 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGXOESPROC) (GLenum pname, GLfixed param);
typedef void (
# 5132 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5132 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGXVOESPROC) (GLenum pname, const GLfixed *param);
typedef void (
# 5133 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5133 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRUSTUMXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (
# 5134 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5134 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCLIPPLANEXOESPROC) (GLenum plane, GLfixed *equation);
typedef void (
# 5135 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5135 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFIXEDVOESPROC) (GLenum pname, GLfixed *params);
typedef void (
# 5136 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5136 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXENVXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void (
# 5137 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5137 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void (
# 5138 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5138 "/usr/include/GL/glext.h" 3 4
             * PFNGLLIGHTMODELXOESPROC) (GLenum pname, GLfixed param);
typedef void (
# 5139 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5139 "/usr/include/GL/glext.h" 3 4
             * PFNGLLIGHTMODELXVOESPROC) (GLenum pname, const GLfixed *param);
typedef void (
# 5140 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5140 "/usr/include/GL/glext.h" 3 4
             * PFNGLLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed param);
typedef void (
# 5141 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5141 "/usr/include/GL/glext.h" 3 4
             * PFNGLLIGHTXVOESPROC) (GLenum light, GLenum pname, const GLfixed *params);
typedef void (
# 5142 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5142 "/usr/include/GL/glext.h" 3 4
             * PFNGLLINEWIDTHXOESPROC) (GLfixed width);
typedef void (
# 5143 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5143 "/usr/include/GL/glext.h" 3 4
             * PFNGLLOADMATRIXXOESPROC) (const GLfixed *m);
typedef void (
# 5144 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5144 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);
typedef void (
# 5145 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5145 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATERIALXVOESPROC) (GLenum face, GLenum pname, const GLfixed *param);
typedef void (
# 5146 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5146 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTMATRIXXOESPROC) (const GLfixed *m);
typedef void (
# 5147 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5147 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD4XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (
# 5148 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5148 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMAL3XOESPROC) (GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (
# 5149 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5149 "/usr/include/GL/glext.h" 3 4
             * PFNGLORTHOXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (
# 5150 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5150 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERXVOESPROC) (GLenum pname, const GLfixed *params);
typedef void (
# 5151 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5151 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTSIZEXOESPROC) (GLfixed size);
typedef void (
# 5152 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5152 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOLYGONOFFSETXOESPROC) (GLfixed factor, GLfixed units);
typedef void (
# 5153 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5153 "/usr/include/GL/glext.h" 3 4
             * PFNGLROTATEXOESPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (
# 5154 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5154 "/usr/include/GL/glext.h" 3 4
             * PFNGLSCALEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (
# 5155 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5155 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXENVXOESPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (
# 5156 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5156 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXENVXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
typedef void (
# 5157 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5157 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (
# 5158 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5158 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
typedef void (
# 5159 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5159 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSLATEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (
# 5160 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5160 "/usr/include/GL/glext.h" 3 4
             * PFNGLACCUMXOESPROC) (GLenum op, GLfixed value);
typedef void (
# 5161 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5161 "/usr/include/GL/glext.h" 3 4
             * PFNGLBITMAPXOESPROC) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
typedef void (
# 5162 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5162 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (
# 5163 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5163 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARACCUMXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (
# 5164 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5164 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR3XOESPROC) (GLfixed red, GLfixed green, GLfixed blue);
typedef void (
# 5165 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5165 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR3XVOESPROC) (const GLfixed *components);
typedef void (
# 5166 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5166 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4XVOESPROC) (const GLfixed *components);
typedef void (
# 5167 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5167 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (
# 5168 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5168 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
typedef void (
# 5169 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5169 "/usr/include/GL/glext.h" 3 4
             * PFNGLEVALCOORD1XOESPROC) (GLfixed u);
typedef void (
# 5170 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5170 "/usr/include/GL/glext.h" 3 4
             * PFNGLEVALCOORD1XVOESPROC) (const GLfixed *coords);
typedef void (
# 5171 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5171 "/usr/include/GL/glext.h" 3 4
             * PFNGLEVALCOORD2XOESPROC) (GLfixed u, GLfixed v);
typedef void (
# 5172 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5172 "/usr/include/GL/glext.h" 3 4
             * PFNGLEVALCOORD2XVOESPROC) (const GLfixed *coords);
typedef void (
# 5173 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5173 "/usr/include/GL/glext.h" 3 4
             * PFNGLFEEDBACKBUFFERXOESPROC) (GLsizei n, GLenum type, const GLfixed *buffer);
typedef void (
# 5174 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5174 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void (
# 5175 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5175 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETHISTOGRAMPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void (
# 5176 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5176 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed *params);
typedef void (
# 5177 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5177 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMAPXVOESPROC) (GLenum target, GLenum query, GLfixed *v);
typedef void (
# 5178 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5178 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);
typedef void (
# 5179 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5179 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPIXELMAPXVPROC) (GLenum map, GLint size, GLfixed *values);
typedef void (
# 5180 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5180 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXGENXVOESPROC) (GLenum coord, GLenum pname, GLfixed *params);
typedef void (
# 5181 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5181 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXLEVELPARAMETERXVOESPROC) (GLenum target, GLint level, GLenum pname, GLfixed *params);
typedef void (
# 5182 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5182 "/usr/include/GL/glext.h" 3 4
             * PFNGLINDEXXOESPROC) (GLfixed component);
typedef void (
# 5183 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5183 "/usr/include/GL/glext.h" 3 4
             * PFNGLINDEXXVOESPROC) (const GLfixed *component);
typedef void (
# 5184 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5184 "/usr/include/GL/glext.h" 3 4
             * PFNGLLOADTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);
typedef void (
# 5185 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5185 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAP1XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
typedef void (
# 5186 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5186 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAP2XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
typedef void (
# 5187 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5187 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPGRID1XOESPROC) (GLint n, GLfixed u1, GLfixed u2);
typedef void (
# 5188 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5188 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPGRID2XOESPROC) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
typedef void (
# 5189 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5189 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);
typedef void (
# 5190 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5190 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD1XOESPROC) (GLenum texture, GLfixed s);
typedef void (
# 5191 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5191 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD1XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void (
# 5192 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5192 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD2XOESPROC) (GLenum texture, GLfixed s, GLfixed t);
typedef void (
# 5193 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5193 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD2XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void (
# 5194 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5194 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD3XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r);
typedef void (
# 5195 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5195 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD3XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void (
# 5196 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5196 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD4XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void (
# 5197 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5197 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMAL3XVOESPROC) (const GLfixed *coords);
typedef void (
# 5198 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5198 "/usr/include/GL/glext.h" 3 4
             * PFNGLPASSTHROUGHXOESPROC) (GLfixed token);
typedef void (
# 5199 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5199 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELMAPXPROC) (GLenum map, GLint size, const GLfixed *values);
typedef void (
# 5200 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5200 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELSTOREXPROC) (GLenum pname, GLfixed param);
typedef void (
# 5201 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5201 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTRANSFERXOESPROC) (GLenum pname, GLfixed param);
typedef void (
# 5202 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5202 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELZOOMXOESPROC) (GLfixed xfactor, GLfixed yfactor);
typedef void (
# 5203 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5203 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRIORITIZETEXTURESXOESPROC) (GLsizei n, const GLuint *textures, const GLfixed *priorities);
typedef void (
# 5204 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5204 "/usr/include/GL/glext.h" 3 4
             * PFNGLRASTERPOS2XOESPROC) (GLfixed x, GLfixed y);
typedef void (
# 5205 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5205 "/usr/include/GL/glext.h" 3 4
             * PFNGLRASTERPOS2XVOESPROC) (const GLfixed *coords);
typedef void (
# 5206 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5206 "/usr/include/GL/glext.h" 3 4
             * PFNGLRASTERPOS3XOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (
# 5207 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5207 "/usr/include/GL/glext.h" 3 4
             * PFNGLRASTERPOS3XVOESPROC) (const GLfixed *coords);
typedef void (
# 5208 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5208 "/usr/include/GL/glext.h" 3 4
             * PFNGLRASTERPOS4XOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed w);
typedef void (
# 5209 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5209 "/usr/include/GL/glext.h" 3 4
             * PFNGLRASTERPOS4XVOESPROC) (const GLfixed *coords);
typedef void (
# 5210 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5210 "/usr/include/GL/glext.h" 3 4
             * PFNGLRECTXOESPROC) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
typedef void (
# 5211 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5211 "/usr/include/GL/glext.h" 3 4
             * PFNGLRECTXVOESPROC) (const GLfixed *v1, const GLfixed *v2);
typedef void (
# 5212 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5212 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD1XOESPROC) (GLfixed s);
typedef void (
# 5213 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5213 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD1XVOESPROC) (const GLfixed *coords);
typedef void (
# 5214 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5214 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2XOESPROC) (GLfixed s, GLfixed t);
typedef void (
# 5215 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5215 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2XVOESPROC) (const GLfixed *coords);
typedef void (
# 5216 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5216 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD3XOESPROC) (GLfixed s, GLfixed t, GLfixed r);
typedef void (
# 5217 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5217 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD3XVOESPROC) (const GLfixed *coords);
typedef void (
# 5218 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5218 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4XOESPROC) (GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (
# 5219 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5219 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4XVOESPROC) (const GLfixed *coords);
typedef void (
# 5220 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5220 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXGENXOESPROC) (GLenum coord, GLenum pname, GLfixed param);
typedef void (
# 5221 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5221 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXGENXVOESPROC) (GLenum coord, GLenum pname, const GLfixed *params);
typedef void (
# 5222 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5222 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX2XOESPROC) (GLfixed x);
typedef void (
# 5223 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5223 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX2XVOESPROC) (const GLfixed *coords);
typedef void (
# 5224 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5224 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX3XOESPROC) (GLfixed x, GLfixed y);
typedef void (
# 5225 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5225 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX3XVOESPROC) (const GLfixed *coords);
typedef void (
# 5226 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5226 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX4XOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (
# 5227 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5227 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX4XVOESPROC) (const GLfixed *coords);
# 5337 "/usr/include/GL/glext.h" 3 4
typedef GLbitfield (
# 5337 "/usr/include/GL/glext.h"
                   __attribute__((ms_abi)) 
# 5337 "/usr/include/GL/glext.h" 3 4
                   * PFNGLQUERYMATRIXXOESPROC) (GLfixed *mantissa, GLint *exponent);
# 5351 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5351 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5351 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARDEPTHFOESPROC) (GLclampf depth);
typedef void (
# 5352 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5352 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat *equation);
typedef void (
# 5353 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5353 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);
typedef void (
# 5354 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5354 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (
# 5355 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5355 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat *equation);
typedef void (
# 5356 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5356 "/usr/include/GL/glext.h" 3 4
             * PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
# 5377 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5377 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5377 "/usr/include/GL/glext.h" 3 4
             * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
# 5401 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5401 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5401 "/usr/include/GL/glext.h" 3 4
                       *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
# 5416 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5416 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5416 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (
# 5417 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5417 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
typedef void (
# 5418 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5418 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam);
typedef GLuint (
# 5419 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 5419 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
# 5436 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5436 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5436 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (
# 5437 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5437 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (
# 5438 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5438 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
typedef void (
# 5439 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5439 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
# 5454 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5454 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5454 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
typedef void (
# 5455 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5455 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
typedef void (
# 5456 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5456 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC) (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
typedef void (
# 5457 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5457 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC) (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
# 5493 "/usr/include/GL/glext.h" 3 4
typedef int64_t GLint64EXT;
# 5518 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5518 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5518 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
typedef void (
# 5519 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5519 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
typedef void (
# 5520 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5520 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (
# 5521 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5521 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (
# 5522 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5522 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5523 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5523 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5524 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5524 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5525 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5525 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5526 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5526 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
typedef void (
# 5527 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5527 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (
# 5528 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5528 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (
# 5529 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5529 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (
# 5530 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5530 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 5531 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5531 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 5532 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5532 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 5533 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5533 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 5534 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5534 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params);
typedef void (
# 5535 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5535 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);
typedef void (
# 5536 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5536 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
typedef void (
# 5537 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5537 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void (
# 5538 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5538 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (
# 5539 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5539 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (
# 5540 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5540 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5541 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5541 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5542 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5542 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5543 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5543 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (
# 5544 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5544 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
typedef void (
# 5545 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5545 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (
# 5546 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5546 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (
# 5547 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5547 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (
# 5548 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5548 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 5549 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5549 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 5550 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5550 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 5551 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5551 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
# 5594 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5594 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5594 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param);







typedef void (
# 5602 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5602 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
typedef void (
# 5603 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5603 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
# 5617 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5617 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5617 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names);
typedef void (
# 5618 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5618 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names);
typedef GLboolean (
# 5619 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 5619 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);
# 5635 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5635 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5635 "/usr/include/GL/glext.h" 3 4
             * PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param);
# 5650 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5650 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5650 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
typedef void (
# 5651 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5651 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
typedef void (
# 5652 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5652 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
typedef void (
# 5653 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5653 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
typedef void (
# 5654 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5654 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data);
typedef void (
# 5655 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5655 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
typedef void (
# 5656 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5656 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
typedef void (
# 5657 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5657 "/usr/include/GL/glext.h" 3 4
             * PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
typedef void (
# 5658 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5658 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
typedef void (
# 5659 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5659 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
typedef void (
# 5660 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5660 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
# 5690 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5690 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5690 "/usr/include/GL/glext.h" 3 4
             * PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat *val);
# 5735 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5735 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5735 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void (
# 5736 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5736 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
# 5749 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5749 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5749 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value);
# 5785 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5785 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5785 "/usr/include/GL/glext.h" 3 4
             * PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
typedef void (
# 5786 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5786 "/usr/include/GL/glext.h" 3 4
             * PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
# 5812 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5812 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5812 "/usr/include/GL/glext.h" 3 4
             * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer);
typedef void (
# 5813 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5813 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
typedef void (
# 5814 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5814 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void (
# 5815 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5815 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
typedef void (
# 5816 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5816 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
# 5830 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5830 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5830 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
typedef void (
# 5831 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5831 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
typedef void (
# 5832 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5832 "/usr/include/GL/glext.h" 3 4
             * PFNGLSETFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean (
# 5833 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 5833 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean (
# 5834 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 5834 "/usr/include/GL/glext.h" 3 4
                  * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
typedef void (
# 5835 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5835 "/usr/include/GL/glext.h" 3 4
             * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean (
# 5836 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 5836 "/usr/include/GL/glext.h" 3 4
                  * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
typedef void (
# 5837 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5837 "/usr/include/GL/glext.h" 3 4
             * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
# 5872 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5872 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5872 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
typedef void (
# 5873 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5873 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
# 5888 "/usr/include/GL/glext.h" 3 4
typedef GLenum (
# 5888 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 5888 "/usr/include/GL/glext.h" 3 4
               * PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
typedef GLenum (
# 5889 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 5889 "/usr/include/GL/glext.h" 3 4
               * PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
typedef void (
# 5890 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5890 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);
# 5925 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5925 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5925 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const void *pointer);
typedef void (
# 5926 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5926 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params);
# 5941 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5941 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5941 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
typedef void (
# 5942 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5942 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
typedef void (
# 5943 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5943 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays);
typedef GLboolean (
# 5944 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 5944 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
# 5960 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5960 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5960 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
typedef void (
# 5961 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5961 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
typedef void (
# 5962 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5962 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
# 5982 "/usr/include/GL/glext.h" 3 4
typedef void (
# 5982 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5982 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef void (
# 5983 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5983 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef GLboolean (
# 5984 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 5984 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
typedef void (
# 5985 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5985 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
typedef void (
# 5986 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5986 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
typedef void (
# 5987 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5987 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
typedef void (
# 5988 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 5988 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
# 6024 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6024 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6024 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);
# 6035 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6035 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6035 "/usr/include/GL/glext.h" 3 4
             * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer);
typedef void (
# 6036 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6036 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
typedef void (
# 6037 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6037 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
# 6055 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6055 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6055 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
typedef void (
# 6056 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6056 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
typedef void (
# 6057 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6057 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
typedef void (
# 6058 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6058 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
# 6173 "/usr/include/GL/glext.h" 3 4
typedef GLuint (
# 6173 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 6173 "/usr/include/GL/glext.h" 3 4
               * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
typedef void (
# 6174 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6174 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
typedef void (
# 6175 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6175 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
typedef void (
# 6176 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6176 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
typedef void (
# 6177 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6177 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDFRAGMENTSHADERATIPROC) (void);
typedef void (
# 6178 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6178 "/usr/include/GL/glext.h" 3 4
             * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
typedef void (
# 6179 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6179 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
typedef void (
# 6180 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6180 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (
# 6181 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6181 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (
# 6182 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6182 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (
# 6183 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6183 "/usr/include/GL/glext.h" 3 4
             * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (
# 6184 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6184 "/usr/include/GL/glext.h" 3 4
             * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (
# 6185 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6185 "/usr/include/GL/glext.h" 3 4
             * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (
# 6186 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6186 "/usr/include/GL/glext.h" 3 4
             * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);
# 6207 "/usr/include/GL/glext.h" 3 4
typedef void *(
# 6207 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 6207 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void (
# 6208 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6208 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
# 6239 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6239 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6239 "/usr/include/GL/glext.h" 3 4
             * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
typedef void (
# 6240 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6240 "/usr/include/GL/glext.h" 3 4
             * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
# 6253 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6253 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6253 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (
# 6254 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6254 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
# 6305 "/usr/include/GL/glext.h" 3 4
typedef GLuint (
# 6305 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 6305 "/usr/include/GL/glext.h" 3 4
               * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage);
typedef GLboolean (
# 6306 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 6306 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void (
# 6307 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6307 "/usr/include/GL/glext.h" 3 4
             * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
typedef void (
# 6308 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6308 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
typedef void (
# 6309 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6309 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
typedef void (
# 6310 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6310 "/usr/include/GL/glext.h" 3 4
             * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void (
# 6311 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6311 "/usr/include/GL/glext.h" 3 4
             * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (
# 6312 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6312 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
typedef void (
# 6313 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6313 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
typedef void (
# 6314 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6314 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (
# 6315 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6315 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
typedef void (
# 6316 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6316 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
# 6335 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6335 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6335 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (
# 6336 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6336 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void (
# 6337 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6337 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);
# 6357 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6357 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6357 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
typedef void (
# 6358 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6358 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (
# 6359 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6359 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
typedef void (
# 6360 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6360 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (
# 6361 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6361 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
typedef void (
# 6362 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6362 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (
# 6363 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6363 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
typedef void (
# 6364 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6364 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (
# 6365 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6365 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
typedef void (
# 6366 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6366 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (
# 6367 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6367 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
typedef void (
# 6368 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6368 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (
# 6369 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6369 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
typedef void (
# 6370 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6370 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (
# 6371 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6371 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
typedef void (
# 6372 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6372 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (
# 6373 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6373 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (
# 6374 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6374 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (
# 6375 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6375 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
typedef void (
# 6376 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6376 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (
# 6377 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6377 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 6378 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6378 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (
# 6379 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6379 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 6380 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6380 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (
# 6381 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6381 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (
# 6382 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6382 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (
# 6383 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6383 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void (
# 6384 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6384 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (
# 6385 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6385 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 6386 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6386 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (
# 6387 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6387 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 6388 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6388 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (
# 6389 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6389 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (
# 6390 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6390 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
typedef void (
# 6391 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6391 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
typedef void (
# 6392 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6392 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (
# 6393 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6393 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
typedef void (
# 6394 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6394 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (
# 6395 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6395 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (
# 6396 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6396 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (
# 6397 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6397 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (
# 6398 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6398 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (
# 6399 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6399 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
typedef void (
# 6400 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6400 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
typedef void (
# 6401 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6401 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
# 6478 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6478 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6478 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
typedef GLint (
# 6479 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 6479 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
typedef GLintptr (
# 6480 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 6480 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
# 6495 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6495 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6495 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDCOLOREXTPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
# 6505 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6505 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6505 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
# 6517 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6517 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6517 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
# 6533 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6533 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6533 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
# 6560 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6560 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6560 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void (
# 6561 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6561 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
# 6572 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6572 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6572 "/usr/include/GL/glext.h" 3 4
             * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
typedef void (
# 6573 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6573 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNLOCKARRAYSEXTPROC) (void);
# 6602 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6602 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6602 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void (
# 6603 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6603 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void (
# 6604 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6604 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
typedef void (
# 6605 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6605 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 6606 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6606 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
typedef void (
# 6607 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6607 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (
# 6608 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6608 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (
# 6609 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6609 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 6610 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6610 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image);
typedef void (
# 6611 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6611 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 6612 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6612 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 6613 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6613 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void (
# 6614 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6614 "/usr/include/GL/glext.h" 3 4
             * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
# 6648 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6648 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6648 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
typedef void (
# 6649 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6649 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
typedef void (
# 6650 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6650 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
typedef void (
# 6651 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6651 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
typedef void (
# 6652 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6652 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
typedef void (
# 6653 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6653 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
typedef void (
# 6654 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6654 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
typedef void (
# 6655 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6655 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3IVEXTPROC) (const GLint *v);
typedef void (
# 6656 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6656 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
typedef void (
# 6657 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6657 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
typedef void (
# 6658 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6658 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
typedef void (
# 6659 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6659 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
typedef void (
# 6660 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6660 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
typedef void (
# 6661 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6661 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
typedef void (
# 6662 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6662 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
typedef void (
# 6663 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6663 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
typedef void (
# 6664 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6664 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
typedef void (
# 6665 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6665 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
typedef void (
# 6666 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6666 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
typedef void (
# 6667 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6667 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
typedef void (
# 6668 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6668 "/usr/include/GL/glext.h" 3 4
             * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 6669 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6669 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
# 6698 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6698 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6698 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (
# 6699 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6699 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (
# 6700 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6700 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (
# 6701 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6701 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 6702 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6702 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
# 6717 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6717 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6717 "/usr/include/GL/glext.h" 3 4
             * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
typedef void (
# 6718 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6718 "/usr/include/GL/glext.h" 3 4
             * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);
# 6733 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6733 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6733 "/usr/include/GL/glext.h" 3 4
             * PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label);
typedef void (
# 6734 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6734 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
# 6743 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6743 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6743 "/usr/include/GL/glext.h" 3 4
             * PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker);
typedef void (
# 6744 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6744 "/usr/include/GL/glext.h" 3 4
             * PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker);
typedef void (
# 6745 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6745 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOPGROUPMARKEREXTPROC) (void);
# 6757 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6757 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6757 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
# 6768 "/usr/include/GL/glext.h" 3 4
typedef void (
# 6768 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6768 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (
# 6769 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6769 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (
# 6770 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6770 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (
# 6771 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6771 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (
# 6772 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6772 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);
typedef void (
# 6773 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6773 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 6774 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6774 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 6775 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6775 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 6776 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6776 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 6777 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6777 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 6778 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6778 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 6779 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6779 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (
# 6780 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6780 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (
# 6781 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6781 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXPOPEXTPROC) (GLenum mode);
typedef void (
# 6782 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6782 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXPUSHEXTPROC) (GLenum mode);
typedef void (
# 6783 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6783 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (
# 6784 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6784 "/usr/include/GL/glext.h" 3 4
             * PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (
# 6785 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6785 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (
# 6786 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6786 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 6787 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6787 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (
# 6788 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6788 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (
# 6789 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6789 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6790 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6790 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6791 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6791 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6792 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6792 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6793 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6793 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (
# 6794 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6794 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (
# 6795 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6795 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (
# 6796 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6796 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 6797 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6797 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (
# 6798 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6798 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 6799 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6799 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (
# 6800 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6800 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (
# 6801 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6801 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (
# 6802 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6802 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6803 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6803 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6804 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6804 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 6805 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6805 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
typedef void (
# 6806 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6806 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 6807 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6807 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (
# 6808 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6808 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 6809 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6809 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (
# 6810 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6810 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (
# 6811 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6811 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (
# 6812 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6812 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
typedef void (
# 6813 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6813 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (
# 6814 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6814 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
typedef void (
# 6815 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6815 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (
# 6816 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6816 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
typedef void (
# 6817 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6817 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 6818 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6818 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (
# 6819 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6819 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
typedef void (
# 6820 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6820 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
typedef void (
# 6821 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6821 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
typedef void (
# 6822 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6822 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (
# 6823 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6823 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (
# 6824 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6824 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (
# 6825 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6825 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 6826 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6826 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6827 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6827 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6828 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6828 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6829 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6829 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6830 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6830 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (
# 6831 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6831 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (
# 6832 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6832 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (
# 6833 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6833 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 6834 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6834 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (
# 6835 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6835 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 6836 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6836 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (
# 6837 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6837 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (
# 6838 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6838 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (
# 6839 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6839 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6840 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6840 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (
# 6841 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6841 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (
# 6842 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6842 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (
# 6843 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6843 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (
# 6844 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6844 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);
typedef void (
# 6845 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6845 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);
typedef void (
# 6846 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6846 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void **data);
typedef void (
# 6847 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6847 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (
# 6848 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6848 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef GLboolean (
# 6849 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 6849 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (
# 6850 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6850 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
typedef void (
# 6851 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6851 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
typedef void (
# 6852 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6852 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (
# 6853 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6853 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (
# 6854 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6854 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (
# 6855 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6855 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (
# 6856 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6856 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (
# 6857 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6857 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (
# 6858 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6858 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, void *img);
typedef void (
# 6859 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6859 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (
# 6860 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6860 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (
# 6861 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6861 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (
# 6862 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6862 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (
# 6863 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6863 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (
# 6864 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6864 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (
# 6865 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6865 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, void *img);
typedef void (
# 6866 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6866 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (
# 6867 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6867 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (
# 6868 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6868 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void (
# 6869 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6869 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void (
# 6870 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6870 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (
# 6871 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6871 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void *(
# 6872 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 6872 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
typedef GLboolean (
# 6873 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 6873 "/usr/include/GL/glext.h" 3 4
                  * PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
typedef void (
# 6874 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6874 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);
typedef void (
# 6875 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6875 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void **params);
typedef void (
# 6876 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6876 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (
# 6877 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6877 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
typedef void (
# 6878 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6878 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (
# 6879 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6879 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (
# 6880 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6880 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (
# 6881 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6881 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
typedef void (
# 6882 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6882 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (
# 6883 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6883 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (
# 6884 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6884 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (
# 6885 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6885 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 6886 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6886 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 6887 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6887 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 6888 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6888 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (
# 6889 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6889 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 6890 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6890 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 6891 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6891 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 6892 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6892 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (
# 6893 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6893 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6894 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6894 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6895 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6895 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6896 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6896 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6897 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6897 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6898 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6898 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6899 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6899 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6900 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6900 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6901 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6901 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (
# 6902 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6902 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (
# 6903 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6903 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (
# 6904 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6904 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (
# 6905 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6905 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
typedef void (
# 6906 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6906 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (
# 6907 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6907 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
typedef void (
# 6908 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6908 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (
# 6909 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6909 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
typedef void (
# 6910 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6910 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (
# 6911 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6911 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
typedef void (
# 6912 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6912 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
typedef void (
# 6913 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6913 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (
# 6914 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6914 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (
# 6915 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6915 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (
# 6916 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6916 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 6917 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6917 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 6918 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6918 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 6919 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6919 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (
# 6920 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6920 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void (
# 6921 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6921 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (
# 6922 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6922 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);
typedef void (
# 6923 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6923 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (
# 6924 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6924 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (
# 6925 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6925 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);
typedef void (
# 6926 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6926 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (
# 6927 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6927 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);
typedef void (
# 6928 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6928 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);
typedef void (
# 6929 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6929 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (
# 6930 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6930 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (
# 6931 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6931 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);
typedef void (
# 6932 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6932 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params);
typedef void (
# 6933 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6933 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);
typedef void (
# 6934 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6934 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (
# 6935 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6935 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 6936 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6936 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
typedef void (
# 6937 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6937 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 6938 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6938 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
typedef void (
# 6939 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6939 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);
typedef void (
# 6940 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6940 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);
typedef void (
# 6941 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6941 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);
typedef void (
# 6942 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6942 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string);
typedef void (
# 6943 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6943 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 6944 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6944 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (
# 6945 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6945 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 6946 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6946 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef GLenum (
# 6947 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 6947 "/usr/include/GL/glext.h" 3 4
               * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
typedef void (
# 6948 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6948 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (
# 6949 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6949 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (
# 6950 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6950 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (
# 6951 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6951 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (
# 6952 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6952 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (
# 6953 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6953 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
typedef void (
# 6954 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6954 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
typedef void (
# 6955 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6955 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (
# 6956 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6956 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (
# 6957 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6957 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (
# 6958 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6958 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
typedef void (
# 6959 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6959 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (
# 6960 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6960 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (
# 6961 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6961 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (
# 6962 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6962 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (
# 6963 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6963 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (
# 6964 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6964 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (
# 6965 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6965 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6966 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6966 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6967 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6967 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (
# 6968 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6968 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6969 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6969 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6970 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6970 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6971 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6971 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6972 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6972 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6973 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6973 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6974 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6974 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (
# 6975 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6975 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 6976 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6976 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (
# 6977 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6977 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (
# 6978 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6978 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (
# 6979 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6979 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (
# 6980 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6980 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint *param);
typedef void (
# 6981 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6981 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void **param);
typedef void (
# 6982 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6982 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (
# 6983 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6983 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void **param);
typedef void *(
# 6984 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 6984 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (
# 6985 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6985 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (
# 6986 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6986 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (
# 6987 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6987 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (
# 6988 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6988 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (
# 6989 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6989 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (
# 6990 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6990 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
typedef void (
# 6991 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6991 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);
typedef void (
# 6992 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6992 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (
# 6993 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6993 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 6994 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6994 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 6995 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6995 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 6996 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6996 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 6997 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6997 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 6998 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6998 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (
# 6999 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 6999 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7000 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7000 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7001 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7001 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7002 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7002 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7003 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7003 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7004 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7004 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7005 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7005 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7006 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7006 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7007 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7007 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (
# 7008 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7008 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (
# 7009 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7009 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (
# 7010 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7010 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 7011 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7011 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (
# 7012 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7012 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (
# 7013 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7013 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (
# 7014 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7014 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (
# 7015 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7015 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (
# 7016 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7016 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (
# 7017 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7017 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (
# 7018 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7018 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (
# 7019 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7019 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (
# 7020 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7020 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (
# 7021 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7021 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (
# 7022 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7022 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor);
# 7284 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7284 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7284 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);







typedef void (
# 7292 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7292 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (
# 7293 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7293 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
# 7304 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7304 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7304 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);







typedef void *GLeglClientBufferEXT;
typedef void (
# 7313 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7313 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERSTORAGEEXTERNALEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
typedef void (
# 7314 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7314 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
# 7331 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7331 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7331 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
typedef void (
# 7332 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7332 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
typedef void (
# 7333 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7333 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
typedef void (
# 7334 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7334 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
typedef void (
# 7335 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7335 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
# 7351 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7351 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7351 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
# 7362 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7362 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7362 "/usr/include/GL/glext.h" 3 4
             * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
# 7427 "/usr/include/GL/glext.h" 3 4
typedef GLboolean (
# 7427 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 7427 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
typedef void (
# 7428 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7428 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
typedef void (
# 7429 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7429 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);
typedef void (
# 7430 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7430 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);
typedef void (
# 7431 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7431 "/usr/include/GL/glext.h" 3 4
             * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (
# 7432 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7432 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef GLboolean (
# 7433 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 7433 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
typedef void (
# 7434 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7434 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
typedef void (
# 7435 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7435 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);
typedef void (
# 7436 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7436 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);
typedef GLenum (
# 7437 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 7437 "/usr/include/GL/glext.h" 3 4
               * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
typedef void (
# 7438 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7438 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (
# 7439 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7439 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (
# 7440 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7440 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (
# 7441 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7441 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (
# 7442 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7442 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void (
# 7443 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7443 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
# 7493 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7493 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7493 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);







typedef void (
# 7501 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7501 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void (
# 7502 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7502 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
# 7539 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7539 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7539 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
typedef void (
# 7540 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7540 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
typedef GLint (
# 7541 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 7541 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
typedef void (
# 7542 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7542 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
typedef void (
# 7543 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7543 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
typedef void (
# 7544 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7544 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (
# 7545 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7545 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (
# 7546 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7546 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (
# 7547 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7547 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (
# 7548 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7548 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (
# 7549 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7549 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
# 7581 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7581 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7581 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (
# 7582 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7582 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 7583 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7583 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 7584 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7584 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (
# 7585 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7585 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 7586 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7586 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 7587 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7587 "/usr/include/GL/glext.h" 3 4
             * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (
# 7588 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7588 "/usr/include/GL/glext.h" 3 4
             * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void (
# 7589 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7589 "/usr/include/GL/glext.h" 3 4
             * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
typedef void (
# 7590 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7590 "/usr/include/GL/glext.h" 3 4
             * PFNGLRESETMINMAXEXTPROC) (GLenum target);
# 7622 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7622 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7622 "/usr/include/GL/glext.h" 3 4
             * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
# 7633 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7633 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7633 "/usr/include/GL/glext.h" 3 4
             * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
# 7654 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7654 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7654 "/usr/include/GL/glext.h" 3 4
             * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
typedef void (
# 7655 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7655 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
typedef void (
# 7656 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7656 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
# 7677 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7677 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7677 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNSIGNEDBYTEVEXTPROC) (GLenum pname, GLubyte *data);
typedef void (
# 7678 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7678 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETUNSIGNEDBYTEI_VEXTPROC) (GLenum target, GLuint index, GLubyte *data);
typedef void (
# 7679 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7679 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEMEMORYOBJECTSEXTPROC) (GLsizei n, const GLuint *memoryObjects);
typedef GLboolean (
# 7680 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 7680 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISMEMORYOBJECTEXTPROC) (GLuint memoryObject);
typedef void (
# 7681 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7681 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATEMEMORYOBJECTSEXTPROC) (GLsizei n, GLuint *memoryObjects);
typedef void (
# 7682 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7682 "/usr/include/GL/glext.h" 3 4
             * PFNGLMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, const GLint *params);
typedef void (
# 7683 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7683 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, GLint *params);
typedef void (
# 7684 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7684 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGEMEM2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (
# 7685 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7685 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (
# 7686 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7686 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGEMEM3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (
# 7687 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7687 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (
# 7688 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7688 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERSTORAGEMEMEXTPROC) (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (
# 7689 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7689 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGEMEM2DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (
# 7690 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7690 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (
# 7691 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7691 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGEMEM3DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (
# 7692 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7692 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (
# 7693 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7693 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC) (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (
# 7694 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7694 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSTORAGEMEM1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
typedef void (
# 7695 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7695 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURESTORAGEMEM1DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
# 7722 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7722 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7722 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMPORTMEMORYFDEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
# 7739 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7739 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7739 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, void *handle);
typedef void (
# 7740 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7740 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMPORTMEMORYWIN32NAMEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, const void *name);
# 7753 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7753 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7753 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
typedef void (
# 7754 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7754 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);
# 7780 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7780 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7780 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
typedef void (
# 7781 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7781 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
# 7821 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7821 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7821 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void (
# 7822 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7822 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data);
typedef void (
# 7823 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7823 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 7824 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7824 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
# 7852 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7852 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7852 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
typedef void (
# 7853 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7853 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (
# 7854 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7854 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (
# 7855 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7855 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 7856 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7856 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 7857 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7857 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
# 7878 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7878 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7878 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
typedef void (
# 7879 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7879 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);
# 7891 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7891 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7891 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
# 7900 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7900 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7900 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp);
# 7916 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7916 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7916 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);
# 7930 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7930 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7930 "/usr/include/GL/glext.h" 3 4
             * PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations);
# 7950 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7950 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7950 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (
# 7951 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7951 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
typedef void (
# 7952 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7952 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (
# 7953 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7953 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
typedef void (
# 7954 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7954 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (
# 7955 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7955 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
typedef void (
# 7956 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7956 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
typedef void (
# 7957 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7957 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
typedef void (
# 7958 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7958 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
typedef void (
# 7959 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7959 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
typedef void (
# 7960 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7960 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (
# 7961 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7961 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
typedef void (
# 7962 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7962 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
typedef void (
# 7963 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7963 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
typedef void (
# 7964 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7964 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
typedef void (
# 7965 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7965 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
typedef void (
# 7966 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7966 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
# 7997 "/usr/include/GL/glext.h" 3 4
typedef void (
# 7997 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7997 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENSEMAPHORESEXTPROC) (GLsizei n, GLuint *semaphores);
typedef void (
# 7998 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 7998 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETESEMAPHORESEXTPROC) (GLsizei n, const GLuint *semaphores);
typedef GLboolean (
# 7999 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 7999 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISSEMAPHOREEXTPROC) (GLuint semaphore);
typedef void (
# 8000 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8000 "/usr/include/GL/glext.h" 3 4
             * PFNGLSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, const GLuint64 *params);
typedef void (
# 8001 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8001 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, GLuint64 *params);
typedef void (
# 8002 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8002 "/usr/include/GL/glext.h" 3 4
             * PFNGLWAITSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
typedef void (
# 8003 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8003 "/usr/include/GL/glext.h" 3 4
             * PFNGLSIGNALSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);
# 8017 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8017 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8017 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMPORTSEMAPHOREFDEXTPROC) (GLuint semaphore, GLenum handleType, GLint fd);
# 8027 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8027 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8027 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC) (GLuint semaphore, GLenum handleType, void *handle);
typedef void (
# 8028 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8028 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC) (GLuint semaphore, GLenum handleType, const void *name);
# 8038 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8038 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8038 "/usr/include/GL/glext.h" 3 4
             * PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
typedef void (
# 8039 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8039 "/usr/include/GL/glext.h" 3 4
             * PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
typedef GLuint (
# 8040 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8040 "/usr/include/GL/glext.h" 3 4
               * PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);
# 8116 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8116 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8116 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void (
# 8117 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8117 "/usr/include/GL/glext.h" 3 4
             * PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);
# 8145 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8145 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8145 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag);
# 8155 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8155 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8155 "/usr/include/GL/glext.h" 3 4
             * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
# 8169 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8169 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8169 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (
# 8170 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8170 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
# 8235 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8235 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8235 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 8236 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8236 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
# 8253 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8253 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8253 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
# 8266 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8266 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8266 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
# 8406 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8406 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8406 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (
# 8407 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8407 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
typedef void (
# 8408 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8408 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 8409 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8409 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
typedef void (
# 8410 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8410 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
typedef void (
# 8411 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8411 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
# 8443 "/usr/include/GL/glext.h" 3 4
typedef GLboolean (
# 8443 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 8443 "/usr/include/GL/glext.h" 3 4
                  * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
typedef void (
# 8444 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8444 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
typedef void (
# 8445 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8445 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
typedef void (
# 8446 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8446 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
typedef GLboolean (
# 8447 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 8447 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISTEXTUREEXTPROC) (GLuint texture);
typedef void (
# 8448 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8448 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
# 8463 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8463 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8463 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
# 8535 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8535 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8535 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64 *params);
typedef void (
# 8536 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8536 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64 *params);
# 8560 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8560 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8560 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
typedef void (
# 8561 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8561 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
typedef void (
# 8562 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8562 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (
# 8563 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8563 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (
# 8564 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8564 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (
# 8565 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8565 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void (
# 8566 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8566 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
# 8612 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8612 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8612 "/usr/include/GL/glext.h" 3 4
             * PFNGLARRAYELEMENTEXTPROC) (GLint i);
typedef void (
# 8613 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8613 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (
# 8614 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8614 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
typedef void (
# 8615 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8615 "/usr/include/GL/glext.h" 3 4
             * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
typedef void (
# 8616 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8616 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPOINTERVEXTPROC) (GLenum pname, void **params);
typedef void (
# 8617 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8617 "/usr/include/GL/glext.h" 3 4
             * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (
# 8618 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8618 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (
# 8619 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8619 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (
# 8620 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8620 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
# 8652 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8652 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8652 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);
typedef void (
# 8653 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8653 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (
# 8654 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8654 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 8655 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8655 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 8656 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8656 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void (
# 8657 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8657 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void (
# 8658 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8658 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void (
# 8659 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8659 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void (
# 8660 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8660 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 8661 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8661 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params);
# 8788 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8788 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8788 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINVERTEXSHADEREXTPROC) (void);
typedef void (
# 8789 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8789 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDVERTEXSHADEREXTPROC) (void);
typedef void (
# 8790 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8790 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
typedef GLuint (
# 8791 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8791 "/usr/include/GL/glext.h" 3 4
               * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
typedef void (
# 8792 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8792 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
typedef void (
# 8793 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8793 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
typedef void (
# 8794 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8794 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void (
# 8795 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8795 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void (
# 8796 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8796 "/usr/include/GL/glext.h" 3 4
             * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (
# 8797 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8797 "/usr/include/GL/glext.h" 3 4
             * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (
# 8798 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8798 "/usr/include/GL/glext.h" 3 4
             * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef void (
# 8799 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8799 "/usr/include/GL/glext.h" 3 4
             * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef GLuint (
# 8800 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8800 "/usr/include/GL/glext.h" 3 4
               * PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef void (
# 8801 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8801 "/usr/include/GL/glext.h" 3 4
             * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const void *addr);
typedef void (
# 8802 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8802 "/usr/include/GL/glext.h" 3 4
             * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const void *addr);
typedef void (
# 8803 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8803 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
typedef void (
# 8804 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8804 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
typedef void (
# 8805 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8805 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
typedef void (
# 8806 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8806 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
typedef void (
# 8807 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8807 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
typedef void (
# 8808 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8808 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
typedef void (
# 8809 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8809 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
typedef void (
# 8810 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8810 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
typedef void (
# 8811 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8811 "/usr/include/GL/glext.h" 3 4
             * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const void *addr);
typedef void (
# 8812 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8812 "/usr/include/GL/glext.h" 3 4
             * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef void (
# 8813 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8813 "/usr/include/GL/glext.h" 3 4
             * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef GLuint (
# 8814 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8814 "/usr/include/GL/glext.h" 3 4
               * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
typedef GLuint (
# 8815 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8815 "/usr/include/GL/glext.h" 3 4
               * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
typedef GLuint (
# 8816 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8816 "/usr/include/GL/glext.h" 3 4
               * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
typedef GLuint (
# 8817 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8817 "/usr/include/GL/glext.h" 3 4
               * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
typedef GLuint (
# 8818 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8818 "/usr/include/GL/glext.h" 3 4
               * PFNGLBINDPARAMETEREXTPROC) (GLenum value);
typedef GLboolean (
# 8819 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 8819 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
typedef void (
# 8820 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8820 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (
# 8821 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8821 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (
# 8822 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8822 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void (
# 8823 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8823 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data);
typedef void (
# 8824 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8824 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (
# 8825 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8825 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (
# 8826 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8826 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void (
# 8827 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8827 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (
# 8828 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8828 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (
# 8829 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8829 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
# 8891 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8891 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8891 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
typedef void (
# 8892 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8892 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
typedef void (
# 8893 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8893 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
# 8903 "/usr/include/GL/glext.h" 3 4
typedef GLboolean (
# 8903 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 8903 "/usr/include/GL/glext.h" 3 4
                  * PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key, GLuint timeout);
typedef GLboolean (
# 8904 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 8904 "/usr/include/GL/glext.h" 3 4
                  * PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key);
# 8919 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8919 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8919 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWRECTANGLESEXTPROC) (GLenum mode, GLsizei count, const GLint *box);
# 8928 "/usr/include/GL/glext.h" 3 4
typedef GLsync (
# 8928 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 8928 "/usr/include/GL/glext.h" 3 4
               * PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);







typedef void (
# 8936 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8936 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMETERMINATORGREMEDYPROC) (void);







typedef void (
# 8944 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8944 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string);
# 8975 "/usr/include/GL/glext.h" 3 4
typedef void (
# 8975 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8975 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
typedef void (
# 8976 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8976 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (
# 8977 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8977 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (
# 8978 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8978 "/usr/include/GL/glext.h" 3 4
             * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 8979 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8979 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 8980 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 8980 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
# 9011 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9011 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9011 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
typedef void (
# 9012 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9012 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride);
# 9028 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9028 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9028 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHSTATICDATAIBMPROC) (GLenum target);
# 9057 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9057 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9057 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void (
# 9058 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9058 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void (
# 9059 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9059 "/usr/include/GL/glext.h" 3 4
             * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean **pointer, GLint ptrstride);
typedef void (
# 9060 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9060 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void (
# 9061 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9061 "/usr/include/GL/glext.h" 3 4
             * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void (
# 9062 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9062 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void (
# 9063 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9063 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void (
# 9064 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9064 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
# 9079 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9079 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9079 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
# 9113 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9113 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9113 "/usr/include/GL/glext.h" 3 4
             * PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC) (void);
# 9125 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9125 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9125 "/usr/include/GL/glext.h" 3 4
             * PFNGLSYNCTEXTUREINTELPROC) (GLuint texture);
typedef void (
# 9126 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9126 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level);
typedef void *(
# 9127 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 9127 "/usr/include/GL/glext.h" 3 4
              * PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout);
# 9142 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9142 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9142 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);
typedef void (
# 9143 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9143 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void **pointer);
typedef void (
# 9144 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9144 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);
typedef void (
# 9145 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9145 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);
# 9176 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9176 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9176 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (
# 9177 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9177 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint *queryHandle);
typedef void (
# 9178 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9178 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (
# 9179 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9179 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (
# 9180 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9180 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint *queryId);
typedef void (
# 9181 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9181 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint *nextQueryId);
typedef void (
# 9182 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9182 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
typedef void (
# 9183 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9183 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
typedef void (
# 9184 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9184 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar *queryName, GLuint *queryId);
typedef void (
# 9185 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9185 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
# 9222 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9222 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9222 "/usr/include/GL/glext.h" 3 4
             * PFNGLRESIZEBUFFERSMESAPROC) (void);
# 9241 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9241 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9241 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
typedef void (
# 9242 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9242 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
typedef void (
# 9243 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9243 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
typedef void (
# 9244 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9244 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
typedef void (
# 9245 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9245 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
typedef void (
# 9246 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9246 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
typedef void (
# 9247 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9247 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
typedef void (
# 9248 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9248 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
typedef void (
# 9249 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9249 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 9250 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9250 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
typedef void (
# 9251 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9251 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 9252 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9252 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
typedef void (
# 9253 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9253 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
typedef void (
# 9254 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9254 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
typedef void (
# 9255 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9255 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
typedef void (
# 9256 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9256 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
typedef void (
# 9257 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9257 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 9258 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9258 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
typedef void (
# 9259 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9259 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 9260 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9260 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
typedef void (
# 9261 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9261 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
typedef void (
# 9262 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9262 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
typedef void (
# 9263 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9263 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (
# 9264 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9264 "/usr/include/GL/glext.h" 3 4
             * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
# 9306 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9306 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9306 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id);
typedef void (
# 9307 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9307 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDCONDITIONALRENDERNVXPROC) (void);
# 9327 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9327 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9327 "/usr/include/GL/glext.h" 3 4
             * PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (
# 9328 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9328 "/usr/include/GL/glext.h" 3 4
             * PFNGLLGPUCOPYIMAGESUBDATANVXPROC) (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void (
# 9329 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9329 "/usr/include/GL/glext.h" 3 4
             * PFNGLLGPUINTERLOCKNVXPROC) (void);
# 9343 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9343 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9343 "/usr/include/GL/glext.h" 3 4
             * PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC) (GLenum mode);







typedef void (
# 9351 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9351 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (
# 9352 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9352 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
# 9361 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9361 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9361 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (
# 9362 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9362 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
# 9371 "/usr/include/GL/glext.h" 3 4
typedef GLuint64 (
# 9371 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 9371 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture);
typedef GLuint64 (
# 9372 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 9372 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler);
typedef void (
# 9373 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9373 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef void (
# 9374 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9374 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef GLuint64 (
# 9375 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 9375 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (
# 9376 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9376 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access);
typedef void (
# 9377 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9377 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef void (
# 9378 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9378 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value);
typedef void (
# 9379 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9379 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (
# 9380 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9380 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (
# 9381 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9381 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean (
# 9382 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 9382 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef GLboolean (
# 9383 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 9383 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle);
# 9452 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9452 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9452 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);
typedef void (
# 9453 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9453 "/usr/include/GL/glext.h" 3 4
             * PFNGLBLENDBARRIERNVPROC) (void);
# 9478 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9478 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9478 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIEWPORTPOSITIONWSCALENVPROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff);
# 9505 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9505 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9505 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATESTATESNVPROC) (GLsizei n, GLuint *states);
typedef void (
# 9506 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9506 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETESTATESNVPROC) (GLsizei n, const GLuint *states);
typedef GLboolean (
# 9507 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 9507 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISSTATENVPROC) (GLuint state);
typedef void (
# 9508 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9508 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTATECAPTURENVPROC) (GLuint state, GLenum mode);
typedef GLuint (
# 9509 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 9509 "/usr/include/GL/glext.h" 3 4
               * PFNGLGETCOMMANDHEADERNVPROC) (GLenum tokenID, GLuint size);
typedef GLushort (
# 9510 "/usr/include/GL/glext.h"
                 __attribute__((ms_abi)) 
# 9510 "/usr/include/GL/glext.h" 3 4
                 * PFNGLGETSTAGEINDEXNVPROC) (GLenum shadertype);
typedef void (
# 9511 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9511 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWCOMMANDSNVPROC) (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
typedef void (
# 9512 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9512 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWCOMMANDSADDRESSNVPROC) (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
typedef void (
# 9513 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9513 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWCOMMANDSSTATESNVPROC) (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (
# 9514 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9514 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (
# 9515 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9515 "/usr/include/GL/glext.h" 3 4
             * PFNGLCREATECOMMANDLISTSNVPROC) (GLsizei n, GLuint *lists);
typedef void (
# 9516 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9516 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETECOMMANDLISTSNVPROC) (GLsizei n, const GLuint *lists);
typedef GLboolean (
# 9517 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 9517 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISCOMMANDLISTNVPROC) (GLuint list);
typedef void (
# 9518 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9518 "/usr/include/GL/glext.h" 3 4
             * PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (
# 9519 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9519 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMMANDLISTSEGMENTSNVPROC) (GLuint list, GLuint segments);
typedef void (
# 9520 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9520 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMPILECOMMANDLISTNVPROC) (GLuint list);
typedef void (
# 9521 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9521 "/usr/include/GL/glext.h" 3 4
             * PFNGLCALLCOMMANDLISTNVPROC) (GLuint list);
# 9555 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9555 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9555 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
typedef void (
# 9556 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9556 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDCONDITIONALRENDERNVPROC) (void);
# 9569 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9569 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9569 "/usr/include/GL/glext.h" 3 4
             * PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits);
# 9580 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9580 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9580 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (GLenum pname, GLfloat value);
# 9591 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9591 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9591 "/usr/include/GL/glext.h" 3 4
             * PFNGLCONSERVATIVERASTERPARAMETERINVPROC) (GLenum pname, GLint param);
# 9605 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9605 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9605 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
# 9623 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9623 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9623 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
typedef void (
# 9624 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9624 "/usr/include/GL/glext.h" 3 4
             * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
typedef void (
# 9625 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9625 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
# 9640 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9640 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9640 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);







typedef void (
# 9648 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9648 "/usr/include/GL/glext.h" 3 4
                       *GLVULKANPROCNV)(void);
typedef void (
# 9649 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9649 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWVKIMAGENVPROC) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef GLVULKANPROCNV (
# 9650 "/usr/include/GL/glext.h"
                       __attribute__((ms_abi)) 
# 9650 "/usr/include/GL/glext.h" 3 4
                       * PFNGLGETVKPROCADDRNVPROC) (const GLchar *name);
typedef void (
# 9651 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9651 "/usr/include/GL/glext.h" 3 4
             * PFNGLWAITVKSEMAPHORENVPROC) (GLuint64 vkSemaphore);
typedef void (
# 9652 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9652 "/usr/include/GL/glext.h" 3 4
             * PFNGLSIGNALVKSEMAPHORENVPROC) (GLuint64 vkSemaphore);
typedef void (
# 9653 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9653 "/usr/include/GL/glext.h" 3 4
             * PFNGLSIGNALVKFENCENVPROC) (GLuint64 vkFence);
# 9689 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9689 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9689 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
typedef void (
# 9690 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9690 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (
# 9691 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9691 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 9692 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9692 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
typedef void (
# 9693 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9693 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (
# 9694 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9694 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 9695 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9695 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
typedef void (
# 9696 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9696 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef void (
# 9697 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9697 "/usr/include/GL/glext.h" 3 4
             * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
# 9723 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9723 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9723 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);
typedef void (
# 9724 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9724 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
typedef void (
# 9725 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9725 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);
# 9738 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9738 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9738 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
typedef void (
# 9739 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9739 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
typedef GLboolean (
# 9740 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 9740 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISFENCENVPROC) (GLuint fence);
typedef GLboolean (
# 9741 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 9741 "/usr/include/GL/glext.h" 3 4
                  * PFNGLTESTFENCENVPROC) (GLuint fence);
typedef void (
# 9742 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9742 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
typedef void (
# 9743 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9743 "/usr/include/GL/glext.h" 3 4
             * PFNGLFINISHFENCENVPROC) (GLuint fence);
typedef void (
# 9744 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9744 "/usr/include/GL/glext.h" 3 4
             * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
# 9791 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9791 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9791 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color);
# 9805 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9805 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9805 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 9806 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9806 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
typedef void (
# 9807 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9807 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 9808 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9808 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
typedef void (
# 9809 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9809 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
typedef void (
# 9810 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9810 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
# 9852 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9852 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9852 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat *v);
typedef void (
# 9853 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9853 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufsize, GLfloat *v);
typedef void (
# 9854 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9854 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components);
# 9868 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9868 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9868 "/usr/include/GL/glext.h" 3 4
             * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
# 9879 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9879 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9879 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
typedef void (
# 9880 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9880 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (
# 9881 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9881 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
# 9904 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9904 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9904 "/usr/include/GL/glext.h" 3 4
             * PFNGLRENDERGPUMASKNVPROC) (GLbitfield mask);
typedef void (
# 9905 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9905 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTBUFFERSUBDATANVPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
typedef void (
# 9906 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9906 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC) (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (
# 9907 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9907 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTCOPYIMAGESUBDATANVPROC) (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (
# 9908 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9908 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (
# 9909 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9909 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (
# 9910 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9910 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTBARRIERNVPROC) (void);
typedef void (
# 9911 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9911 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTWAITSYNCNVPROC) (GLuint signalGpu, GLbitfield waitGpuMask);
typedef void (
# 9912 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9912 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint *params);
typedef void (
# 9913 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9913 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint *params);
typedef void (
# 9914 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9914 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint64 *params);
typedef void (
# 9915 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9915 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params);
# 9942 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9942 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9942 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (
# 9943 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9943 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void (
# 9944 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9944 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (
# 9945 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9945 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (
# 9946 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9946 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void (
# 9947 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9947 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (
# 9948 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9948 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (
# 9949 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9949 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void (
# 9950 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9950 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (
# 9951 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9951 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (
# 9952 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9952 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void (
# 9953 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9953 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (
# 9954 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9954 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
typedef void (
# 9955 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9955 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
typedef void (
# 9956 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9956 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
typedef void (
# 9957 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9957 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
# 9988 "/usr/include/GL/glext.h" 3 4
typedef void (
# 9988 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9988 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params);
typedef void (
# 9989 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 9989 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param);
# 10006 "/usr/include/GL/glext.h" 3 4
typedef unsigned short GLhalfNV;

typedef void (
# 10008 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10008 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
typedef void (
# 10009 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10009 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10010 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10010 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (
# 10011 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10011 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10012 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10012 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void (
# 10013 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10013 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10014 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10014 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
typedef void (
# 10015 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10015 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10016 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10016 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (
# 10017 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10017 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10018 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10018 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
typedef void (
# 10019 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10019 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10020 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10020 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
typedef void (
# 10021 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10021 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10022 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10022 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
typedef void (
# 10023 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10023 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10024 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10024 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (
# 10025 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10025 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10026 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10026 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (
# 10027 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10027 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10028 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10028 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
typedef void (
# 10029 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10029 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void (
# 10030 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10030 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
typedef void (
# 10031 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10031 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void (
# 10032 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10032 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (
# 10033 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10033 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void (
# 10034 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10034 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (
# 10035 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10035 "/usr/include/GL/glext.h" 3 4
             * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void (
# 10036 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10036 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
typedef void (
# 10037 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10037 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
typedef void (
# 10038 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10038 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (
# 10039 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10039 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
typedef void (
# 10040 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10040 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
typedef void (
# 10041 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10041 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
typedef void (
# 10042 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10042 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
typedef void (
# 10043 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10043 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void (
# 10044 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10044 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
typedef void (
# 10045 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10045 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void (
# 10046 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10046 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (
# 10047 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10047 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void (
# 10048 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10048 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void (
# 10049 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10049 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void (
# 10050 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10050 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
typedef void (
# 10051 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10051 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
typedef void (
# 10052 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10052 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
typedef void (
# 10053 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10053 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
# 10110 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10110 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10110 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params);
# 10137 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10137 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10137 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
typedef void (
# 10138 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10138 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
typedef GLboolean (
# 10139 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 10139 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
typedef void (
# 10140 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10140 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
typedef void (
# 10141 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10141 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDOCCLUSIONQUERYNVPROC) (void);
typedef void (
# 10142 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10142 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
typedef void (
# 10143 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10143 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);
# 10168 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10168 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10168 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
typedef void (
# 10169 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10169 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
typedef void (
# 10170 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10170 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
# 10347 "/usr/include/GL/glext.h" 3 4
typedef GLuint (
# 10347 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 10347 "/usr/include/GL/glext.h" 3 4
               * PFNGLGENPATHSNVPROC) (GLsizei range);
typedef void (
# 10348 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10348 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range);
typedef GLboolean (
# 10349 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 10349 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISPATHNVPROC) (GLuint path);
typedef void (
# 10350 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10350 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (
# 10351 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10351 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (
# 10352 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10352 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (
# 10353 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10353 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (
# 10354 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10354 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString);
typedef void (
# 10355 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10355 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (
# 10356 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10356 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (
# 10357 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10357 "/usr/include/GL/glext.h" 3 4
             * PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
typedef void (
# 10358 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10358 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
typedef void (
# 10359 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10359 "/usr/include/GL/glext.h" 3 4
             * PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef void (
# 10360 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10360 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
typedef void (
# 10361 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10361 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
typedef void (
# 10362 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10362 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
typedef void (
# 10363 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10363 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
typedef void (
# 10364 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10364 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
typedef void (
# 10365 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10365 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
typedef void (
# 10366 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10366 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
typedef void (
# 10367 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10367 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
typedef void (
# 10368 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10368 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
typedef void (
# 10369 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10369 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
typedef void (
# 10370 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10370 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (
# 10371 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10371 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (
# 10372 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10372 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
typedef void (
# 10373 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10373 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (
# 10374 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10374 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (
# 10375 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10375 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (
# 10376 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10376 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (
# 10377 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10377 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
typedef void (
# 10378 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10378 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
typedef void (
# 10379 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10379 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
typedef void (
# 10380 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10380 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
typedef void (
# 10381 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10381 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
typedef void (
# 10382 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10382 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
typedef void (
# 10383 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10383 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
typedef void (
# 10384 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10384 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
typedef GLboolean (
# 10385 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 10385 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean (
# 10386 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 10386 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
typedef GLfloat (
# 10387 "/usr/include/GL/glext.h"
                __attribute__((ms_abi)) 
# 10387 "/usr/include/GL/glext.h" 3 4
                * PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef GLboolean (
# 10388 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 10388 "/usr/include/GL/glext.h" 3 4
                  * PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
typedef void (
# 10389 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10389 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (
# 10390 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10390 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (
# 10391 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10391 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (
# 10392 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10392 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (
# 10393 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10393 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (
# 10394 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10394 "/usr/include/GL/glext.h" 3 4
             * PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m);
typedef void (
# 10395 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10395 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void (
# 10396 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10396 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void (
# 10397 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10397 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (
# 10398 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10398 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef GLenum (
# 10399 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 10399 "/usr/include/GL/glext.h" 3 4
               * PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
typedef GLenum (
# 10400 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 10400 "/usr/include/GL/glext.h" 3 4
               * PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (
# 10401 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 10401 "/usr/include/GL/glext.h" 3 4
               * PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (
# 10402 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10402 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
typedef void (
# 10403 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10403 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params);
typedef void (
# 10404 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10404 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
typedef void (
# 10405 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10405 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
typedef void (
# 10406 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10406 "/usr/include/GL/glext.h" 3 4
             * PFNGLPATHFOGGENNVPROC) (GLenum genMode);
typedef void (
# 10407 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10407 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
typedef void (
# 10408 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10408 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
typedef void (
# 10409 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10409 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
typedef void (
# 10410 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10410 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
# 10492 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10492 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10492 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, const void *pointer);
typedef void (
# 10493 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10493 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
# 10505 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10505 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10505 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void (
# 10506 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10506 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
# 10521 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10521 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10521 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
typedef void (
# 10522 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10522 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef void (
# 10523 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10523 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);
typedef void (
# 10524 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10524 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);
typedef void (
# 10525 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10525 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);
typedef void (
# 10526 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10526 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);
# 10541 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10541 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10541 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRIMITIVERESTARTNVPROC) (void);
typedef void (
# 10542 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10542 "/usr/include/GL/glext.h" 3 4
             * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
# 10557 "/usr/include/GL/glext.h" 3 4
typedef GLint (
# 10557 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 10557 "/usr/include/GL/glext.h" 3 4
              * PFNGLQUERYRESOURCENVPROC) (GLenum queryType, GLint tagId, GLuint bufSize, GLint *buffer);







typedef void (
# 10565 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10565 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENQUERYRESOURCETAGNVPROC) (GLsizei n, GLint *tagIds);
typedef void (
# 10566 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10566 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEQUERYRESOURCETAGNVPROC) (GLsizei n, const GLint *tagIds);
typedef void (
# 10567 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10567 "/usr/include/GL/glext.h" 3 4
             * PFNGLQUERYRESOURCETAGNVPROC) (GLint tagId, const GLchar *tagString);
# 10626 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10626 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10626 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
typedef void (
# 10627 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10627 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
typedef void (
# 10628 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10628 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
typedef void (
# 10629 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10629 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void (
# 10630 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10630 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (
# 10631 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10631 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void (
# 10632 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10632 "/usr/include/GL/glext.h" 3 4
             * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (
# 10633 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10633 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
typedef void (
# 10634 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10634 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
typedef void (
# 10635 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10635 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
typedef void (
# 10636 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10636 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
typedef void (
# 10637 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10637 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
typedef void (
# 10638 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10638 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);
# 10659 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10659 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10659 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
typedef void (
# 10660 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10660 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);
# 10682 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10682 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10682 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void (
# 10683 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10683 "/usr/include/GL/glext.h" 3 4
             * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (
# 10684 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10684 "/usr/include/GL/glext.h" 3 4
             * PFNGLRESOLVEDEPTHVALUESNVPROC) (void);
# 10721 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10721 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10721 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
typedef void (
# 10722 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10722 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
typedef GLboolean (
# 10723 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 10723 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
typedef void (
# 10724 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10724 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
typedef void (
# 10725 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10725 "/usr/include/GL/glext.h" 3 4
             * PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
typedef GLboolean (
# 10726 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 10726 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
typedef void (
# 10727 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10727 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);
typedef void (
# 10728 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10728 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);
typedef void (
# 10729 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10729 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);
typedef void (
# 10730 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10730 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
typedef void (
# 10731 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10731 "/usr/include/GL/glext.h" 3 4
             * PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (
# 10732 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10732 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
typedef void (
# 10733 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10733 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
# 10799 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10799 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10799 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREBARRIERNVPROC) (void);
# 10827 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10827 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10827 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (
# 10828 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10828 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (
# 10829 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10829 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (
# 10830 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10830 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (
# 10831 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10831 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (
# 10832 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10832 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
# 10991 "/usr/include/GL/glext.h" 3 4
typedef void (
# 10991 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10991 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
typedef void (
# 10992 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10992 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
typedef void (
# 10993 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10993 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLenum bufferMode);
typedef void (
# 10994 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10994 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (
# 10995 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10995 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (
# 10996 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10996 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (
# 10997 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10997 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
typedef void (
# 10998 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 10998 "/usr/include/GL/glext.h" 3 4
             * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
typedef GLint (
# 10999 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 10999 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
typedef void (
# 11000 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11000 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (
# 11001 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11001 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
typedef void (
# 11002 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11002 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
# 11025 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11025 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11025 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
typedef void (
# 11026 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11026 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);
typedef void (
# 11027 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11027 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);
typedef GLboolean (
# 11028 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 11028 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
typedef void (
# 11029 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11029 "/usr/include/GL/glext.h" 3 4
             * PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
typedef void (
# 11030 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11030 "/usr/include/GL/glext.h" 3 4
             * PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
typedef void (
# 11031 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11031 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);
# 11052 "/usr/include/GL/glext.h" 3 4
typedef GLintptr GLvdpauSurfaceNV;




typedef void (
# 11057 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11057 "/usr/include/GL/glext.h" 3 4
             * PFNGLVDPAUINITNVPROC) (const void *vdpDevice, const void *getProcAddress);
typedef void (
# 11058 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11058 "/usr/include/GL/glext.h" 3 4
             * PFNGLVDPAUFININVPROC) (void);
typedef GLvdpauSurfaceNV (
# 11059 "/usr/include/GL/glext.h"
                         __attribute__((ms_abi)) 
# 11059 "/usr/include/GL/glext.h" 3 4
                         * PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef GLvdpauSurfaceNV (
# 11060 "/usr/include/GL/glext.h"
                         __attribute__((ms_abi)) 
# 11060 "/usr/include/GL/glext.h" 3 4
                         * PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef GLboolean (
# 11061 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 11061 "/usr/include/GL/glext.h" 3 4
                  * PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);
typedef void (
# 11062 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11062 "/usr/include/GL/glext.h" 3 4
             * PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);
typedef void (
# 11063 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11063 "/usr/include/GL/glext.h" 3 4
             * PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
typedef void (
# 11064 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11064 "/usr/include/GL/glext.h" 3 4
             * PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);
typedef void (
# 11065 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11065 "/usr/include/GL/glext.h" 3 4
             * PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
typedef void (
# 11066 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11066 "/usr/include/GL/glext.h" 3 4
             * PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
# 11088 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11088 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11088 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
typedef void (
# 11089 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11089 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const void *pointer);
# 11103 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11103 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11103 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
typedef void (
# 11104 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11104 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
typedef void (
# 11105 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11105 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (
# 11106 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11106 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (
# 11107 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11107 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (
# 11108 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11108 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (
# 11109 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11109 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (
# 11110 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11110 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void (
# 11111 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11111 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
typedef void (
# 11112 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11112 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void (
# 11113 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11113 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (
# 11114 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11114 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (
# 11115 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11115 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (
# 11116 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11116 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (
# 11117 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11117 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (
# 11118 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11118 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void (
# 11119 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11119 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);
typedef void (
# 11120 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11120 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
typedef void (
# 11121 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11121 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
# 11172 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11172 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11172 "/usr/include/GL/glext.h" 3 4
             * PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void (
# 11173 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11173 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (
# 11174 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11174 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (
# 11175 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11175 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (
# 11176 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11176 "/usr/include/GL/glext.h" 3 4
             * PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (
# 11177 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11177 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (
# 11178 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11178 "/usr/include/GL/glext.h" 3 4
             * PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
typedef void (
# 11179 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11179 "/usr/include/GL/glext.h" 3 4
             * PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (
# 11180 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11180 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (
# 11181 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11181 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void (
# 11182 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11182 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (
# 11183 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11183 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);
# 11285 "/usr/include/GL/glext.h" 3 4
typedef GLboolean (
# 11285 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 11285 "/usr/include/GL/glext.h" 3 4
                  * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
typedef void (
# 11286 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11286 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
typedef void (
# 11287 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11287 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
typedef void (
# 11288 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11288 "/usr/include/GL/glext.h" 3 4
             * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
typedef void (
# 11289 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11289 "/usr/include/GL/glext.h" 3 4
             * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
typedef void (
# 11290 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11290 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
typedef void (
# 11291 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11291 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef void (
# 11292 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11292 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
typedef void (
# 11293 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11293 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
typedef void (
# 11294 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11294 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
typedef void (
# 11295 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11295 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void (
# 11296 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11296 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void (
# 11297 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11297 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (
# 11298 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11298 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void **pointer);
typedef GLboolean (
# 11299 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 11299 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISPROGRAMNVPROC) (GLuint id);
typedef void (
# 11300 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11300 "/usr/include/GL/glext.h" 3 4
             * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
typedef void (
# 11301 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11301 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 11302 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11302 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
typedef void (
# 11303 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11303 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 11304 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11304 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
typedef void (
# 11305 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11305 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLdouble *v);
typedef void (
# 11306 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11306 "/usr/include/GL/glext.h" 3 4
             * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *v);
typedef void (
# 11307 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11307 "/usr/include/GL/glext.h" 3 4
             * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
typedef void (
# 11308 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11308 "/usr/include/GL/glext.h" 3 4
             * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (
# 11309 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11309 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 11310 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11310 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
typedef void (
# 11311 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11311 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 11312 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11312 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
typedef void (
# 11313 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11313 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 11314 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11314 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
typedef void (
# 11315 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11315 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
typedef void (
# 11316 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11316 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (
# 11317 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11317 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 11318 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11318 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (
# 11319 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11319 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 11320 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11320 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
typedef void (
# 11321 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11321 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
typedef void (
# 11322 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11322 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (
# 11323 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11323 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 11324 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11324 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 11325 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11325 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 11326 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11326 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (
# 11327 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11327 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
typedef void (
# 11328 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11328 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (
# 11329 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11329 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
typedef void (
# 11330 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11330 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 11331 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11331 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
typedef void (
# 11332 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11332 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (
# 11333 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11333 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
typedef void (
# 11334 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11334 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (
# 11335 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11335 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
typedef void (
# 11336 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11336 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void (
# 11337 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11337 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void (
# 11338 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11338 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void (
# 11339 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11339 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void (
# 11340 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11340 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void (
# 11341 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11341 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void (
# 11342 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11342 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void (
# 11343 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11343 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void (
# 11344 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11344 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void (
# 11345 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11345 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void (
# 11346 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11346 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void (
# 11347 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11347 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void (
# 11348 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11348 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);
# 11436 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11436 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11436 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
typedef void (
# 11437 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11437 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
typedef void (
# 11438 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11438 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void (
# 11439 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11439 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (
# 11440 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11440 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
typedef void (
# 11441 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11441 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
typedef void (
# 11442 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11442 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (
# 11443 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11443 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (
# 11444 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11444 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
typedef void (
# 11445 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11445 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
typedef void (
# 11446 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11446 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
typedef void (
# 11447 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11447 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
typedef void (
# 11448 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11448 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (
# 11449 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11449 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (
# 11450 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11450 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (
# 11451 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11451 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (
# 11452 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11452 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
typedef void (
# 11453 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11453 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
typedef void (
# 11454 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11454 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
typedef void (
# 11455 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11455 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
typedef void (
# 11456 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11456 "/usr/include/GL/glext.h" 3 4
             * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (
# 11457 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11457 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (
# 11458 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11458 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
# 11517 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11517 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11517 "/usr/include/GL/glext.h" 3 4
             * PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void (
# 11518 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11518 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef void (
# 11519 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11519 "/usr/include/GL/glext.h" 3 4
             * PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef void (
# 11520 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11520 "/usr/include/GL/glext.h" 3 4
             * PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void (
# 11521 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11521 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);
typedef void (
# 11522 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11522 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
typedef void (
# 11523 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11523 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
typedef void (
# 11524 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11524 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
typedef GLenum (
# 11525 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 11525 "/usr/include/GL/glext.h" 3 4
               * PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
typedef void (
# 11526 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11526 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
typedef void (
# 11527 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11527 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
typedef void (
# 11528 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11528 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
# 11563 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11563 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11563 "/usr/include/GL/glext.h" 3 4
             * PFNGLVIEWPORTSWIZZLENVPROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
# 11597 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11597 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11597 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
# 11629 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11629 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11629 "/usr/include/GL/glext.h" 3 4
             * PFNGLHINTPGIPROC) (GLenum target, GLint mode);
# 11687 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11687 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11687 "/usr/include/GL/glext.h" 3 4
             * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
typedef void (
# 11688 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11688 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
# 11700 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11700 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11700 "/usr/include/GL/glext.h" 3 4
             * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
typedef void (
# 11701 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11701 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
# 11732 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11732 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11732 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
typedef void (
# 11733 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11733 "/usr/include/GL/glext.h" 3 4
             * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
# 11746 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11746 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11746 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
typedef void (
# 11747 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11747 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
typedef void (
# 11748 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11748 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
typedef void (
# 11749 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11749 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
typedef void (
# 11750 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11750 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
typedef void (
# 11751 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11751 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);
# 11780 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11780 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11780 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
typedef void (
# 11781 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11781 "/usr/include/GL/glext.h" 3 4
             * PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
# 11794 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11794 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11794 "/usr/include/GL/glext.h" 3 4
             * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
typedef void (
# 11795 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11795 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
# 11814 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11814 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11814 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (
# 11815 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11815 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);
# 11830 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11830 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11830 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
# 11845 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11845 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11845 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
typedef void (
# 11846 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11846 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
# 11890 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11890 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11890 "/usr/include/GL/glext.h" 3 4
             * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
typedef GLint (
# 11891 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 11891 "/usr/include/GL/glext.h" 3 4
              * PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
typedef GLint (
# 11892 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 11892 "/usr/include/GL/glext.h" 3 4
              * PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
typedef GLuint (
# 11893 "/usr/include/GL/glext.h"
               __attribute__((ms_abi)) 
# 11893 "/usr/include/GL/glext.h" 3 4
               * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
typedef void (
# 11894 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11894 "/usr/include/GL/glext.h" 3 4
             * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
typedef GLboolean (
# 11895 "/usr/include/GL/glext.h"
                  __attribute__((ms_abi)) 
# 11895 "/usr/include/GL/glext.h" 3 4
                  * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
# 11967 "/usr/include/GL/glext.h" 3 4
typedef void (
# 11967 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 11967 "/usr/include/GL/glext.h" 3 4
             * PFNGLFLUSHRASTERSGIXPROC) (void);
# 12001 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12001 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12001 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
typedef void (
# 12002 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12002 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
typedef void (
# 12003 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12003 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
typedef void (
# 12004 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12004 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
typedef void (
# 12005 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12005 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
typedef void (
# 12006 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12006 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
typedef void (
# 12007 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12007 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
typedef void (
# 12008 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12008 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
typedef void (
# 12009 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12009 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
typedef void (
# 12010 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12010 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
typedef void (
# 12011 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12011 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
typedef void (
# 12012 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12012 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
typedef void (
# 12013 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12013 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
typedef void (
# 12014 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12014 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
typedef void (
# 12015 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12015 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
typedef void (
# 12016 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12016 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
typedef void (
# 12017 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12017 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
typedef void (
# 12018 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12018 "/usr/include/GL/glext.h" 3 4
             * PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
# 12046 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12046 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12046 "/usr/include/GL/glext.h" 3 4
             * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);







typedef void (
# 12054 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12054 "/usr/include/GL/glext.h" 3 4
             * PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const void *params);
# 12064 "/usr/include/GL/glext.h" 3 4
typedef GLint (
# 12064 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 12064 "/usr/include/GL/glext.h" 3 4
              * PFNGLGETINSTRUMENTSSGIXPROC) (void);
typedef void (
# 12065 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12065 "/usr/include/GL/glext.h" 3 4
             * PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
typedef GLint (
# 12066 "/usr/include/GL/glext.h"
              __attribute__((ms_abi)) 
# 12066 "/usr/include/GL/glext.h" 3 4
              * PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
typedef void (
# 12067 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12067 "/usr/include/GL/glext.h" 3 4
             * PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
typedef void (
# 12068 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12068 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
typedef void (
# 12069 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12069 "/usr/include/GL/glext.h" 3 4
             * PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
# 12093 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12093 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12093 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
typedef void (
# 12094 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12094 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
typedef void (
# 12095 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12095 "/usr/include/GL/glext.h" 3 4
             * PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
typedef void (
# 12096 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12096 "/usr/include/GL/glext.h" 3 4
             * PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
typedef void (
# 12097 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12097 "/usr/include/GL/glext.h" 3 4
             * PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
typedef void (
# 12098 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12098 "/usr/include/GL/glext.h" 3 4
             * PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);
# 12113 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12113 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12113 "/usr/include/GL/glext.h" 3 4
             * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
# 12139 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12139 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12139 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
typedef void (
# 12140 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12140 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
typedef void (
# 12141 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12141 "/usr/include/GL/glext.h" 3 4
             * PFNGLDEFORMSGIXPROC) (GLbitfield mask);
typedef void (
# 12142 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12142 "/usr/include/GL/glext.h" 3 4
             * PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);
# 12155 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12155 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12155 "/usr/include/GL/glext.h" 3 4
             * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);
# 12197 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12197 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12197 "/usr/include/GL/glext.h" 3 4
             * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
typedef void (
# 12198 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12198 "/usr/include/GL/glext.h" 3 4
             * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
typedef void (
# 12199 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12199 "/usr/include/GL/glext.h" 3 4
             * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
typedef void (
# 12200 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12200 "/usr/include/GL/glext.h" 3 4
             * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);
# 12220 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12220 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12220 "/usr/include/GL/glext.h" 3 4
             * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
# 12313 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12313 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12313 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void (
# 12314 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12314 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (
# 12315 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12315 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (
# 12316 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12316 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (
# 12317 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12317 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table);
typedef void (
# 12318 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12318 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (
# 12319 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12319 "/usr/include/GL/glext.h" 3 4
             * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);
# 12341 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12341 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12341 "/usr/include/GL/glext.h" 3 4
             * PFNGLFINISHTEXTURESUNXPROC) (void);
# 12356 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12356 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12356 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
typedef void (
# 12357 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12357 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
typedef void (
# 12358 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12358 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
typedef void (
# 12359 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12359 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
typedef void (
# 12360 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12360 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
typedef void (
# 12361 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12361 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
typedef void (
# 12362 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12362 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
typedef void (
# 12363 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12363 "/usr/include/GL/glext.h" 3 4
             * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
# 12380 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12380 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12380 "/usr/include/GL/glext.h" 3 4
             * PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);
# 12410 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12410 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12410 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
typedef void (
# 12411 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12411 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
typedef void (
# 12412 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12412 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
typedef void (
# 12413 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12413 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
typedef void (
# 12414 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12414 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
typedef void (
# 12415 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12415 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
typedef void (
# 12416 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12416 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void **pointer);
# 12430 "/usr/include/GL/glext.h" 3 4
typedef void (
# 12430 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12430 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void (
# 12431 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12431 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
typedef void (
# 12432 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12432 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12433 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12433 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
typedef void (
# 12434 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12434 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12435 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12435 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
typedef void (
# 12436 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12436 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12437 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12437 "/usr/include/GL/glext.h" 3 4
             * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
typedef void (
# 12438 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12438 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12439 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12439 "/usr/include/GL/glext.h" 3 4
             * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (
# 12440 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12440 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12441 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12441 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
typedef void (
# 12442 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12442 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 12443 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12443 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
typedef void (
# 12444 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12444 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12445 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12445 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
typedef void (
# 12446 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12446 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12447 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12447 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
typedef void (
# 12448 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12448 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12449 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12449 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void (
# 12450 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12450 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12451 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12451 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (
# 12452 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12452 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (
# 12453 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12453 "/usr/include/GL/glext.h" 3 4
             * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (
# 12454 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12454 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12455 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12455 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
typedef void (
# 12456 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12456 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12457 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12457 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
typedef void (
# 12458 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12458 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12459 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12459 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
typedef void (
# 12460 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12460 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12461 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12461 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
typedef void (
# 12462 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12462 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12463 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12463 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (
# 12464 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12464 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12465 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12465 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
typedef void (
# 12466 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12466 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12467 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12467 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void (
# 12468 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12468 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (
# 12469 "/usr/include/GL/glext.h"
             __attribute__((ms_abi)) 
# 12469 "/usr/include/GL/glext.h" 3 4
             * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
# 12526 "/usr/include/GL/glext.h" 3 4
}
# 2056 "/usr/include/GL/gl.h" 2 3 4
# 2082 "/usr/include/GL/gl.h" 3 4
extern void 
# 2082 "/usr/include/GL/gl.h"
          __attribute__((ms_abi)) 
# 2082 "/usr/include/GL/gl.h" 3 4
                     glBlendEquationSeparateATI( GLenum modeRGB, GLenum modeA );
typedef void (
# 2083 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2083 "/usr/include/GL/gl.h" 3 4
             * PFNGLBLENDEQUATIONSEPARATEATIPROC) (GLenum modeRGB, GLenum modeA);






typedef void* GLeglImageOES;
# 2099 "/usr/include/GL/gl.h" 3 4
typedef void (
# 2099 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2099 "/usr/include/GL/gl.h" 3 4
             * PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image);
typedef void (
# 2100 "/usr/include/GL/gl.h"
             __attribute__((ms_abi)) 
# 2100 "/usr/include/GL/gl.h" 3 4
             * PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLeglImageOES image);
# 2112 "/usr/include/GL/gl.h" 3 4
}
# 172 "/usr/include/GLFW/glfw3.h" 2 3 4
# 751 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (*GLFWglproc)(void);
# 765 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (*GLFWvkproc)(void);
# 777 "/usr/include/GLFW/glfw3.h" 3 4
typedef struct GLFWmonitor GLFWmonitor;
# 789 "/usr/include/GLFW/glfw3.h" 3 4
typedef struct GLFWwindow GLFWwindow;
# 801 "/usr/include/GLFW/glfw3.h" 3 4
typedef struct GLFWcursor GLFWcursor;
# 817 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWerrorfun)(int,const char*);
# 836 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);
# 854 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);
# 870 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWwindowclosefun)(GLFWwindow*);
# 886 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);
# 903 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);
# 921 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);
# 939 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);
# 960 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);
# 979 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);
# 996 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);
# 1013 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);
# 1034 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);
# 1051 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);
# 1072 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);
# 1089 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);
# 1105 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);
# 1122 "/usr/include/GLFW/glfw3.h" 3 4
typedef void (* GLFWjoystickfun)(int,int);
# 1136 "/usr/include/GLFW/glfw3.h" 3 4
typedef struct GLFWvidmode
{


    int width;


    int height;


    int redBits;


    int greenBits;


    int blueBits;


    int refreshRate;
} GLFWvidmode;
# 1169 "/usr/include/GLFW/glfw3.h" 3 4
typedef struct GLFWgammaramp
{


    unsigned short* red;


    unsigned short* green;


    unsigned short* blue;


    unsigned int size;
} GLFWgammaramp;
# 1193 "/usr/include/GLFW/glfw3.h" 3 4
typedef struct GLFWimage
{


    int width;


    int height;


    unsigned char* pixels;
} GLFWimage;
# 1243 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwInit(void);
# 1275 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwTerminate(void);
# 1302 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetVersion(int* major, int* minor, int* rev);
# 1333 "/usr/include/GLFW/glfw3.h" 3 4
 const char* glfwGetVersionString(void);
# 1367 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun);
# 1396 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWmonitor** glfwGetMonitors(int* count);
# 1420 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWmonitor* glfwGetPrimaryMonitor(void);
# 1445 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
# 1479 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);
# 1505 "/usr/include/GLFW/glfw3.h" 3 4
 const char* glfwGetMonitorName(GLFWmonitor* monitor);
# 1528 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun);
# 1561 "/usr/include/GLFW/glfw3.h" 3 4
 const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
# 1589 "/usr/include/GLFW/glfw3.h" 3 4
 const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
# 1611 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetGamma(GLFWmonitor* monitor, float gamma);
# 1637 "/usr/include/GLFW/glfw3.h" 3 4
 const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
# 1667 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);
# 1685 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwDefaultWindowHints(void);
# 1713 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwWindowHint(int hint, int value);
# 1834 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);
# 1863 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwDestroyWindow(GLFWwindow* window);
# 1883 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwWindowShouldClose(GLFWwindow* window);
# 1905 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowShouldClose(GLFWwindow* window, int value);
# 1930 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowTitle(GLFWwindow* window, const char* title);
# 1969 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images);
# 1997 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);
# 2028 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);
# 2058 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);
# 2098 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
# 2138 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);
# 2176 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowSize(GLFWwindow* window, int width, int height);
# 2205 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);
# 2242 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);
# 2269 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwIconifyWindow(GLFWwindow* window);
# 2296 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwRestoreWindow(GLFWwindow* window);
# 2321 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwMaximizeWindow(GLFWwindow* window);
# 2343 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwShowWindow(GLFWwindow* window);
# 2365 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwHideWindow(GLFWwindow* window);
# 2393 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwFocusWindow(GLFWwindow* window);
# 2415 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
# 2464 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
# 2497 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwGetWindowAttrib(GLFWwindow* window, int attrib);
# 2520 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);
# 2541 "/usr/include/GLFW/glfw3.h" 3 4
 void* glfwGetWindowUserPointer(GLFWwindow* window);
# 2565 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun cbfun);
# 2590 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun cbfun);
# 2623 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun cbfun);
# 2652 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun cbfun);
# 2680 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun cbfun);
# 2703 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun cbfun);
# 2726 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun cbfun);
# 2761 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwPollEvents(void);
# 2806 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwWaitEvents(void);
# 2852 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwWaitEventsTimeout(double timeout);
# 2876 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwPostEmptyEvent(void);
# 2899 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwGetInputMode(GLFWwindow* window, int mode);
# 2947 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetInputMode(GLFWwindow* window, int mode, int value);
# 3004 "/usr/include/GLFW/glfw3.h" 3 4
 const char* glfwGetKeyName(int key, int scancode);
# 3044 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwGetKey(GLFWwindow* window, int key);
# 3073 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwGetMouseButton(GLFWwindow* window, int button);
# 3111 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);
# 3148 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);
# 3188 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot);
# 3213 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWcursor* glfwCreateStandardCursor(int shape);
# 3237 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwDestroyCursor(GLFWcursor* cursor);
# 3264 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);
# 3307 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun cbfun);
# 3345 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun cbfun);
# 3378 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun cbfun);
# 3408 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun cbfun);
# 3433 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun cbfun);
# 3457 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun cbfun);
# 3484 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun cbfun);
# 3512 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun cbfun);
# 3532 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwJoystickPresent(int joy);
# 3566 "/usr/include/GLFW/glfw3.h" 3 4
 const float* glfwGetJoystickAxes(int joy, int* count);
# 3601 "/usr/include/GLFW/glfw3.h" 3 4
 const unsigned char* glfwGetJoystickButtons(int joy, int* count);
# 3633 "/usr/include/GLFW/glfw3.h" 3 4
 const char* glfwGetJoystickName(int joy);
# 3656 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun cbfun);
# 3681 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetClipboardString(GLFWwindow* window, const char* string);
# 3711 "/usr/include/GLFW/glfw3.h" 3 4
 const char* glfwGetClipboardString(GLFWwindow* window);
# 3738 "/usr/include/GLFW/glfw3.h" 3 4
 double glfwGetTime(void);
# 3765 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSetTime(double time);
# 3787 "/usr/include/GLFW/glfw3.h" 3 4
 uint64_t glfwGetTimerValue(void);
# 3807 "/usr/include/GLFW/glfw3.h" 3 4
 uint64_t glfwGetTimerFrequency(void);
# 3841 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwMakeContextCurrent(GLFWwindow* window);
# 3862 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWwindow* glfwGetCurrentContext(void);
# 3896 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSwapBuffers(GLFWwindow* window);
# 3943 "/usr/include/GLFW/glfw3.h" 3 4
 void glfwSwapInterval(int interval);
# 3981 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwExtensionSupported(const char* extension);
# 4023 "/usr/include/GLFW/glfw3.h" 3 4
 GLFWglproc glfwGetProcAddress(const char* procname);
# 4049 "/usr/include/GLFW/glfw3.h" 3 4
 int glfwVulkanSupported(void);
# 4093 "/usr/include/GLFW/glfw3.h" 3 4
 const char** glfwGetRequiredInstanceExtensions(uint32_t* count);
# 4244 "/usr/include/GLFW/glfw3.h" 3 4
}
# 2 "helloWorld.cpp" 2
# 1 "/usr/include/c++/8.1.0/iostream" 1 3
# 36 "/usr/include/c++/8.1.0/iostream" 3
       
# 37 "/usr/include/c++/8.1.0/iostream" 3

# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 236 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 509 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 512 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 39 "/usr/include/c++/8.1.0/iostream" 2 3
# 1 "/usr/include/c++/8.1.0/ostream" 1 3
# 36 "/usr/include/c++/8.1.0/ostream" 3
       
# 37 "/usr/include/c++/8.1.0/ostream" 3

# 1 "/usr/include/c++/8.1.0/ios" 1 3
# 36 "/usr/include/c++/8.1.0/ios" 3
       
# 37 "/usr/include/c++/8.1.0/ios" 3

# 1 "/usr/include/c++/8.1.0/iosfwd" 1 3
# 36 "/usr/include/c++/8.1.0/iosfwd" 3
       
# 37 "/usr/include/c++/8.1.0/iosfwd" 3


# 1 "/usr/include/c++/8.1.0/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/8.1.0/bits/stringfwd.h" 3


# 1 "/usr/include/c++/8.1.0/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/8.1.0/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/8.1.0/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/8.1.0/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "/usr/include/c++/8.1.0/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "/usr/include/c++/8.1.0/iosfwd" 2 3
# 1 "/usr/include/c++/8.1.0/bits/postypes.h" 1 3
# 38 "/usr/include/c++/8.1.0/bits/postypes.h" 3
       
# 39 "/usr/include/c++/8.1.0/bits/postypes.h" 3

# 1 "/usr/include/c++/8.1.0/cwchar" 1 3
# 39 "/usr/include/c++/8.1.0/cwchar" 3
       
# 40 "/usr/include/c++/8.1.0/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/bits/floatn.h" 1 3 4
# 74 "/usr/include/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 86 "/usr/include/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 207 "/usr/include/bits/floatn-common.h" 3 4
typedef float _Float32;
# 244 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float64;
# 261 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 278 "/usr/include/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 673 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 727 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 782 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 808 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 818 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 857 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/include/c++/8.1.0/cwchar" 2 3
# 62 "/usr/include/c++/8.1.0/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/8.1.0/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 232 "/usr/include/c++/8.1.0/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/include/c++/8.1.0/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "/usr/include/c++/8.1.0/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/8.1.0/bits/postypes.h" 2 3
# 68 "/usr/include/c++/8.1.0/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/8.1.0/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/8.1.0/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/8.1.0/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/8.1.0/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/8.1.0/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/8.1.0/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/usr/include/c++/8.1.0/ios" 2 3
# 1 "/usr/include/c++/8.1.0/exception" 1 3
# 33 "/usr/include/c++/8.1.0/exception" 3
       
# 34 "/usr/include/c++/8.1.0/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/8.1.0/bits/exception.h" 1 3
# 34 "/usr/include/c++/8.1.0/bits/exception.h" 3
       
# 35 "/usr/include/c++/8.1.0/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/8.1.0/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/8.1.0/exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 101 "/usr/include/c++/8.1.0/exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 133 "/usr/include/c++/8.1.0/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "/usr/include/c++/8.1.0/bits/exception_defines.h" 1 3
# 38 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/8.1.0/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/8.1.0/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/8.1.0/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/8.1.0/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/8.1.0/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/8.1.0/typeinfo" 1 3
# 32 "/usr/include/c++/8.1.0/typeinfo" 3
       
# 33 "/usr/include/c++/8.1.0/typeinfo" 3



# 1 "/usr/include/c++/8.1.0/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/8.1.0/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/8.1.0/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/8.1.0/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/usr/include/c++/8.1.0/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/8.1.0/new" 1 3
# 37 "/usr/include/c++/8.1.0/new" 3
       
# 38 "/usr/include/c++/8.1.0/new" 3


# 1 "/usr/include/c++/8.1.0/exception" 1 3
# 41 "/usr/include/c++/8.1.0/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "/usr/include/c++/8.1.0/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "/usr/include/c++/8.1.0/new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "/usr/include/c++/8.1.0/new" 3
#pragma GCC visibility pop
# 41 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "/usr/include/c++/8.1.0/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      try
 {

          void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
          (void)__cxxabiv1::__cxa_init_primary_exception(
       __e, const_cast<std::type_info*>(&typeid(__ex)),
       __exception_ptr::__dest_thunk<_Ex>);
          ::new (__e) _Ex(__ex);
          return exception_ptr(__e);



 }
      catch(...)
 {
   return current_exception();
 }



    }


}

}

#pragma GCC visibility pop
# 144 "/usr/include/c++/8.1.0/exception" 2 3
# 1 "/usr/include/c++/8.1.0/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/nested_exception.h" 3
#pragma GCC visibility push(default)






# 1 "/usr/include/c++/8.1.0/bits/move.h" 1 3
# 34 "/usr/include/c++/8.1.0/bits/move.h" 3
# 1 "/usr/include/c++/8.1.0/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/concept_check.h" 3
# 35 "/usr/include/c++/8.1.0/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}

# 1 "/usr/include/c++/8.1.0/type_traits" 1 3
# 32 "/usr/include/c++/8.1.0/type_traits" 3
       
# 33 "/usr/include/c++/8.1.0/type_traits" 3
# 42 "/usr/include/c++/8.1.0/type_traits" 3
namespace std
{
  typedef short unsigned int uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/8.1.0/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 103 "/usr/include/c++/8.1.0/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 192 "/usr/include/c++/8.1.0/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 324 "/usr/include/c++/8.1.0/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 759 "/usr/include/c++/8.1.0/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __bool_constant<__is_assignable(_Tp, _Up)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
      : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
      : public __is_implicitly_default_constructible_impl<_Tp>::type
  { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>,
                      __is_implicitly_default_constructible_safe<_Tp>>
  { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<wchar_t> : __make_unsigned<int>
    { };



  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1607 "/usr/include/c++/8.1.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1696 "/usr/include/c++/8.1.0/type_traits" 3
  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };



  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1726 "/usr/include/c++/8.1.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1872 "/usr/include/c++/8.1.0/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 1911 "/usr/include/c++/8.1.0/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;


  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2382 "/usr/include/c++/8.1.0/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;






  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 2947 "/usr/include/c++/8.1.0/type_traits" 3

}
# 56 "/usr/include/c++/8.1.0/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 72 "/usr/include/c++/8.1.0/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 116 "/usr/include/c++/8.1.0/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 136 "/usr/include/c++/8.1.0/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 176 "/usr/include/c++/8.1.0/bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {

     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "/usr/include/c++/8.1.0/bits/nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 145 "/usr/include/c++/8.1.0/exception" 2 3
# 40 "/usr/include/c++/8.1.0/ios" 2 3
# 1 "/usr/include/c++/8.1.0/bits/char_traits.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/char_traits.h" 3
       
# 38 "/usr/include/c++/8.1.0/bits/char_traits.h" 3

# 1 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/8.1.0/bits/functexcept.h" 1 3
# 42 "/usr/include/c++/8.1.0/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/8.1.0/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/8.1.0/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/8.1.0/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/8.1.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/usr/include/c++/8.1.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/usr/include/c++/8.1.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/8.1.0/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/8.1.0/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/8.1.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/8.1.0/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/8.1.0/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/8.1.0/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/8.1.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/8.1.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/8.1.0/bits/stl_pair.h" 1 3
# 65 "/usr/include/c++/8.1.0/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/8.1.0/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };
# 197 "/usr/include/c++/8.1.0/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 241 "/usr/include/c++/8.1.0/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 269 "/usr/include/c++/8.1.0/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __not_<__and_<is_copy_assignable<_T1>,
                is_copy_assignable<_T2>>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p) = delete;

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 516 "/usr/include/c++/8.1.0/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 535 "/usr/include/c++/8.1.0/bits/stl_pair.h" 3

}
# 65 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 89 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
# 231 "/usr/include/c++/8.1.0/bits/stl_iterator_base_types.h" 3
  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/8.1.0/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/8.1.0/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/8.1.0/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/include/c++/8.1.0/debug/assertions.h" 1 3
# 66 "/usr/include/c++/8.1.0/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "/usr/include/c++/8.1.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "/usr/include/c++/8.1.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {

     
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 1 3
# 66 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/8.1.0/bits/ptr_traits.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 198 "/usr/include/c++/8.1.0/bits/ptr_traits.h" 3

}
# 67 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 100 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







     
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




     
      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 167 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 297 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 387 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }




  template<typename _Iterator>
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 451 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 486 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 528 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 543 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 577 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 619 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 638 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 689 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 734 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 758 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 858 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    { return __it.base(); }
# 1003 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;

     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }



  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 1268 "/usr/include/c++/8.1.0/bits/stl_iterator.h" 3

}
# 68 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/8.1.0/debug/debug.h" 1 3
# 48 "/usr/include/c++/8.1.0/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 70 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/8.1.0/bits/predefined_ops.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 118 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 148 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
    { return __it; }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
        && __is_pointer<_II>::__value
        && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 444 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 477 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
        && __is_pointer<_BI1>::__value
        && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 620 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 656 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 722 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 782 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __is_pointer<_II1>::__value
        && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>
 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
 static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 982 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }


# 1037 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1069 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1156 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1188 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1219 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1255 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1298 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1331 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1378 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1413 "/usr/include/c++/8.1.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }




}
# 40 "/usr/include/c++/8.1.0/bits/char_traits.h" 2 3

# 1 "/usr/include/c++/8.1.0/cwchar" 1 3
# 39 "/usr/include/c++/8.1.0/cwchar" 3
       
# 40 "/usr/include/c++/8.1.0/cwchar" 3
# 42 "/usr/include/c++/8.1.0/bits/char_traits.h" 2 3





namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/8.1.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "/usr/include/c++/8.1.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };



  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 268 "/usr/include/c++/8.1.0/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 else
   return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {





   return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 else
   return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}




# 1 "/usr/include/c++/8.1.0/cstdint" 1 3
# 32 "/usr/include/c++/8.1.0/cstdint" 3
       
# 33 "/usr/include/c++/8.1.0/cstdint" 3
# 46 "/usr/include/c++/8.1.0/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 502 "/usr/include/c++/8.1.0/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/usr/include/c++/8.1.0/ios" 2 3
# 1 "/usr/include/c++/8.1.0/bits/localefwd.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/localefwd.h" 3
       
# 38 "/usr/include/c++/8.1.0/bits/localefwd.h" 3


# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++locale.h" 1 3
# 39 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++locale.h" 3
       
# 40 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++locale.h" 3

# 1 "/usr/include/c++/8.1.0/clocale" 1 3
# 39 "/usr/include/c++/8.1.0/clocale" 3
       
# 40 "/usr/include/c++/8.1.0/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 43 "/usr/include/c++/8.1.0/clocale" 2 3
# 51 "/usr/include/c++/8.1.0/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/include/c++/8.1.0/bits/localefwd.h" 2 3

# 1 "/usr/include/c++/8.1.0/cctype" 1 3
# 39 "/usr/include/c++/8.1.0/cctype" 3
       
# 40 "/usr/include/c++/8.1.0/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4






# 1 "/usr/include/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/bits/byteswap.h" 2 3 4
# 44 "/usr/include/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 43 "/usr/include/c++/8.1.0/cctype" 2 3
# 62 "/usr/include/c++/8.1.0/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/usr/include/c++/8.1.0/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/8.1.0/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 42 "/usr/include/c++/8.1.0/ios" 2 3
# 1 "/usr/include/c++/8.1.0/bits/ios_base.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
       
# 38 "/usr/include/c++/8.1.0/bits/ios_base.h" 3

# 1 "/usr/include/c++/8.1.0/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/8.1.0/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/8.1.0/ext/atomicity.h" 3


# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr.h" 1 3
# 30 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr.h" 3
# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 1 3
# 35 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 32 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4







struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 33 "/usr/include/sched.h" 2 3 4





typedef __pid_t pid_t;




# 1 "/usr/include/bits/sched.h" 1 3 4
# 75 "/usr/include/bits/sched.h" 3 4
struct sched_param
{
  int sched_priority;
};

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 73 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 22 "/usr/include/bits/timex.h" 3 4
# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 23 "/usr/include/bits/timex.h" 2 3 4



struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4






# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 25 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 145 "/usr/include/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 156 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 191 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 229 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 495 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 507 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 541 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 743 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 807 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 889 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1001 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1045 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1112 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1146 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1160 "/usr/include/pthread.h" 3 4
}
# 36 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 2 3
# 47 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/8.1.0/ext/atomicity.h" 2 3
# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/8.1.0/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/8.1.0/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "/usr/include/c++/8.1.0/bits/ios_base.h" 2 3

# 1 "/usr/include/c++/8.1.0/bits/locale_classes.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
       
# 38 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3


# 1 "/usr/include/c++/8.1.0/string" 1 3
# 36 "/usr/include/c++/8.1.0/string" 3
       
# 37 "/usr/include/c++/8.1.0/string" 3




# 1 "/usr/include/c++/8.1.0/bits/allocator.h" 1 3
# 46 "/usr/include/c++/8.1.0/bits/allocator.h" 3
# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 1 3
# 33 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
# 1 "/usr/include/c++/8.1.0/ext/new_allocator.h" 1 3
# 40 "/usr/include/c++/8.1.0/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/include/c++/8.1.0/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
 new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();
# 111 "/usr/include/c++/8.1.0/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      {







 ::operator delete(__p);
      }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }
# 151 "/usr/include/c++/8.1.0/ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/include/c++/8.1.0/bits/allocator.h" 2 3
# 57 "/usr/include/c++/8.1.0/bits/allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }

    };
# 107 "/usr/include/c++/8.1.0/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
 allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }



  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };



}
# 42 "/usr/include/c++/8.1.0/string" 2 3


# 1 "/usr/include/c++/8.1.0/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/8.1.0/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/8.1.0/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/8.1.0/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/8.1.0/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/include/c++/8.1.0/string" 2 3



# 1 "/usr/include/c++/8.1.0/bits/stl_function.h" 1 3
# 63 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 104 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x > __y))
   return __x > __y;
 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x < __y))
   return __x < __y;
 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x >= __y))
   return __x >= __y;
 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x <= __y))
   return __x <= __y;
 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 750 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 978 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1055 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1178 "/usr/include/c++/8.1.0/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/8.1.0/backward/binders.h" 1 3
# 60 "/usr/include/c++/8.1.0/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/8.1.0/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1369 "/usr/include/c++/8.1.0/bits/stl_function.h" 2 3
# 49 "/usr/include/c++/8.1.0/string" 2 3


# 1 "/usr/include/c++/8.1.0/bits/range_access.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/range_access.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/range_access.h" 3


# 1 "/usr/include/c++/8.1.0/initializer_list" 1 3
# 33 "/usr/include/c++/8.1.0/initializer_list" 3
       
# 34 "/usr/include/c++/8.1.0/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 37 "/usr/include/c++/8.1.0/bits/range_access.h" 2 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 323 "/usr/include/c++/8.1.0/bits/range_access.h" 3

}
# 52 "/usr/include/c++/8.1.0/string" 2 3
# 1 "/usr/include/c++/8.1.0/bits/basic_string.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
       
# 38 "/usr/include/c++/8.1.0/bits/basic_string.h" 3


# 1 "/usr/include/c++/8.1.0/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/8.1.0/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/8.1.0/ext/alloc_traits.h" 3



# 1 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 1 3
# 41 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Alloc2, typename _Tp>
 static auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 static auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 299 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 314 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 326 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 341 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 354 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p, 0); }
# 366 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 377 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 434 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 448 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 460 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 472 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 484 "/usr/include/c++/8.1.0/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };



  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;



}
# 37 "/usr/include/c++/8.1.0/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 158 "/usr/include/c++/8.1.0/ext/alloc_traits.h" 3
  };


}
# 41 "/usr/include/c++/8.1.0/bits/basic_string.h" 2 3
# 52 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 76 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:




      typedef const_iterator __const_iterator;
# 139 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 298 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 450 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 481 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 499 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }






      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }







      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 531 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 599 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 646 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 703 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 721 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (!__str._M_is_local()
     && (_Alloc_traits::_S_propagate_on_move_assign()
       || _Alloc_traits::_S_always_equal()))
   {
     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {
      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
     assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 806 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 935 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 948 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {

 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }

      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 997 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1026 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 ;
 return _M_data()[__pos];
      }
# 1043 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


 ;

 ;
 return _M_data()[__pos];
      }
# 1064 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1085 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
 ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
 ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
 ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return operator[](this->size() - 1);
      }
# 1148 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1201 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1218 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1260 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1284 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1329 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1360 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1383 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1399 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1415 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1432 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1445 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1513 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1555 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1591 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
 ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }
# 1611 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1634 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1657 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1676 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1700 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1718 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1778 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1797 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1816 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
 ;
 _M_erase(size() - 1, 1);
      }
# 1860 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1882 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1907 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1932 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1956 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1974 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1994 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2016 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2037 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2062 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2094 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2153 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2212 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2250 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2260 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2270 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2282 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2301 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2317 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2331 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2363 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2380 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2393 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2427 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2441 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2458 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2472 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2507 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2521 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2541 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2556 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2591 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2605 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2625 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2639 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2674 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2688 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2706 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2721 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2756 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2770 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2788 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2804 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2823 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2916 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2942 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2960 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 2984 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3011 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;


      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 5886 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6007 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6054 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6092 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6130 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6168 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6206 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6244 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6264 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6282 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6305 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6322 "/usr/include/c++/8.1.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "/usr/include/c++/8.1.0/ext/string_conversions.h" 1 3
# 32 "/usr/include/c++/8.1.0/ext/string_conversions.h" 3
       
# 33 "/usr/include/c++/8.1.0/ext/string_conversions.h" 3
# 41 "/usr/include/c++/8.1.0/ext/string_conversions.h" 3
# 1 "/usr/include/c++/8.1.0/cstdlib" 1 3
# 39 "/usr/include/c++/8.1.0/cstdlib" 3
       
# 40 "/usr/include/c++/8.1.0/cstdlib" 3
# 75 "/usr/include/c++/8.1.0/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;
# 104 "/usr/include/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 135 "/usr/include/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 146 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 178 "/usr/include/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 197 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4
# 49 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/sys/select.h" 3 4
}
# 198 "/usr/include/sys/types.h" 2 3 4







# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/sys/sysmacros.h" 3 4
# 1 "/usr/include/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/sys/sysmacros.h" 3 4
extern "C" {

extern unsigned int gnu_dev_major (__dev_t __dev) throw () __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) throw () __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () __attribute__ ((__const__));
# 85 "/usr/include/sys/sysmacros.h" 3 4
}
# 206 "/usr/include/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 257 "/usr/include/sys/types.h" 3 4
}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 607 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1017 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/8.1.0/cstdlib" 2 3

# 1 "/usr/include/c++/8.1.0/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/std_abs.h" 3
# 46 "/usr/include/c++/8.1.0/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/usr/include/c++/8.1.0/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/8.1.0/cstdlib" 2 3
# 121 "/usr/include/c++/8.1.0/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/8.1.0/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/8.1.0/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 42 "/usr/include/c++/8.1.0/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/8.1.0/cwchar" 1 3
# 39 "/usr/include/c++/8.1.0/cwchar" 3
       
# 40 "/usr/include/c++/8.1.0/cwchar" 3
# 43 "/usr/include/c++/8.1.0/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/8.1.0/cstdio" 1 3
# 39 "/usr/include/c++/8.1.0/cstdio" 3
       
# 40 "/usr/include/c++/8.1.0/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4







# 1 "/usr/include/bits/libio.h" 1 3 4
# 35 "/usr/include/bits/libio.h" 3 4
# 1 "/usr/include/bits/_G_config.h" 1 3 4
# 19 "/usr/include/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stddef.h" 1 3 4
# 20 "/usr/include/bits/_G_config.h" 2 3 4






typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/bits/libio.h" 2 3 4
# 53 "/usr/include/bits/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdarg.h" 1 3 4
# 54 "/usr/include/bits/libio.h" 2 3 4
# 149 "/usr/include/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 462 "/usr/include/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 524 "/usr/include/bits/libio.h" 3 4
}
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 78 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();







extern FILE *tmpfile (void) ;
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 868 "/usr/include/stdio.h" 3 4
}
# 43 "/usr/include/c++/8.1.0/cstdio" 2 3
# 96 "/usr/include/c++/8.1.0/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/8.1.0/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/8.1.0/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/include/c++/8.1.0/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/8.1.0/cerrno" 1 3
# 39 "/usr/include/c++/8.1.0/cerrno" 3
       
# 40 "/usr/include/c++/8.1.0/cerrno" 3


# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/bits/errno.h" 1 3 4
# 26 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;





typedef int error_t;




}
# 43 "/usr/include/c++/8.1.0/cerrno" 2 3
# 45 "/usr/include/c++/8.1.0/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6362 "/usr/include/c++/8.1.0/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }






  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}





# 1 "/usr/include/c++/8.1.0/bits/functional_hash.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/functional_hash.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/8.1.0/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "/usr/include/c++/8.1.0/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 187 "/usr/include/c++/8.1.0/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6588 "/usr/include/c++/8.1.0/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };






  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }



    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }


#pragma GCC diagnostic pop
  }
  }




}
# 53 "/usr/include/c++/8.1.0/string" 2 3
# 1 "/usr/include/c++/8.1.0/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/8.1.0/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/8.1.0/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1155 "/usr/include/c++/8.1.0/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/usr/include/c++/8.1.0/string" 2 3
# 41 "/usr/include/c++/8.1.0/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    locale() throw();
# 126 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 438 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 483 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 641 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 668 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 682 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 699 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 718 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 732 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 761 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 775 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 788 "/usr/include/c++/8.1.0/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/8.1.0/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/8.1.0/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/8.1.0/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/usr/include/c++/8.1.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/usr/include/c++/8.1.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 852 "/usr/include/c++/8.1.0/bits/locale_classes.h" 2 3
# 42 "/usr/include/c++/8.1.0/bits/ios_base.h" 2 3




# 1 "/usr/include/c++/8.1.0/system_error" 1 3
# 32 "/usr/include/c++/8.1.0/system_error" 3
       
# 33 "/usr/include/c++/8.1.0/system_error" 3






# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/error_constants.h" 1 3
# 34 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/error_constants.h" 3
# 1 "/usr/include/c++/8.1.0/cerrno" 1 3
# 39 "/usr/include/c++/8.1.0/cerrno" 3
       
# 40 "/usr/include/c++/8.1.0/cerrno" 3
# 35 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/error_constants.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,


      wrong_protocol_type = 91
    };


}
# 40 "/usr/include/c++/8.1.0/system_error" 2 3

# 1 "/usr/include/c++/8.1.0/stdexcept" 1 3
# 36 "/usr/include/c++/8.1.0/stdexcept" 3
       
# 37 "/usr/include/c++/8.1.0/stdexcept" 3




namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "/usr/include/c++/8.1.0/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;


    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;


    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;

    virtual ~underflow_error() noexcept;
  };




}
# 42 "/usr/include/c++/8.1.0/system_error" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 71 "/usr/include/c++/8.1.0/system_error" 3
  inline namespace _V2 {


  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 110 "/usr/include/c++/8.1.0/system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std __attribute__ ((__visibility__ ("default")))
{





  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };
# 414 "/usr/include/c++/8.1.0/system_error" 3

}
# 47 "/usr/include/c++/8.1.0/bits/ios_base.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 0x7fffffff,
      _S_ios_fmtflags_min = ~0x7fffffff
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 0x7fffffff,
      _S_ios_openmode_min = ~0x7fffffff
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 0x7fffffff,
      _S_ios_iostate_min = ~0x7fffffff
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 228 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
  class ios_base
  {
# 246 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
  public:
# 255 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;



    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 489 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 506 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 518 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 631 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 647 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 664 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 690 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 741 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 753 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 764 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 775 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 794 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 810 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 831 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 848 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 862 "/usr/include/c++/8.1.0/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 43 "/usr/include/c++/8.1.0/ios" 2 3
# 1 "/usr/include/c++/8.1.0/streambuf" 1 3
# 36 "/usr/include/c++/8.1.0/streambuf" 3
       
# 37 "/usr/include/c++/8.1.0/streambuf" 3
# 45 "/usr/include/c++/8.1.0/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 121 "/usr/include/c++/8.1.0/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 215 "/usr/include/c++/8.1.0/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 232 "/usr/include/c++/8.1.0/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 245 "/usr/include/c++/8.1.0/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 257 "/usr/include/c++/8.1.0/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 269 "/usr/include/c++/8.1.0/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 290 "/usr/include/c++/8.1.0/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 304 "/usr/include/c++/8.1.0/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 322 "/usr/include/c++/8.1.0/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 344 "/usr/include/c++/8.1.0/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 363 "/usr/include/c++/8.1.0/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 378 "/usr/include/c++/8.1.0/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 403 "/usr/include/c++/8.1.0/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 430 "/usr/include/c++/8.1.0/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 456 "/usr/include/c++/8.1.0/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 470 "/usr/include/c++/8.1.0/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 488 "/usr/include/c++/8.1.0/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 504 "/usr/include/c++/8.1.0/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 515 "/usr/include/c++/8.1.0/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 535 "/usr/include/c++/8.1.0/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 551 "/usr/include/c++/8.1.0/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 561 "/usr/include/c++/8.1.0/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 582 "/usr/include/c++/8.1.0/streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 597 "/usr/include/c++/8.1.0/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 608 "/usr/include/c++/8.1.0/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 620 "/usr/include/c++/8.1.0/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 633 "/usr/include/c++/8.1.0/streambuf" 3
      virtual int
      sync() { return 0; }
# 655 "/usr/include/c++/8.1.0/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 671 "/usr/include/c++/8.1.0/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 693 "/usr/include/c++/8.1.0/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 706 "/usr/include/c++/8.1.0/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 730 "/usr/include/c++/8.1.0/streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 748 "/usr/include/c++/8.1.0/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 774 "/usr/include/c++/8.1.0/streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 790 "/usr/include/c++/8.1.0/streambuf" 3
      [[__deprecated__("stossc is deprecated, use sbumpc instead")]]

      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);





}

# 1 "/usr/include/c++/8.1.0/bits/streambuf.tcc" 1 3
# 37 "/usr/include/c++/8.1.0/bits/streambuf.tcc" 3
       
# 38 "/usr/include/c++/8.1.0/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 863 "/usr/include/c++/8.1.0/streambuf" 2 3
# 44 "/usr/include/c++/8.1.0/ios" 2 3
# 1 "/usr/include/c++/8.1.0/bits/basic_ios.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3



# 1 "/usr/include/c++/8.1.0/bits/locale_facets.h" 1 3
# 37 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
       
# 38 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3

# 1 "/usr/include/c++/8.1.0/cwctype" 1 3
# 39 "/usr/include/c++/8.1.0/cwctype" 3
       
# 40 "/usr/include/c++/8.1.0/cwctype" 3
# 50 "/usr/include/c++/8.1.0/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 155 "/usr/include/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();






extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();







extern int iswalnum_l (wint_t __wc, locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     throw ();






extern wint_t towlower_l (wint_t __wc, locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) throw ();



}
# 51 "/usr/include/c++/8.1.0/cwctype" 2 3
# 80 "/usr/include/c++/8.1.0/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/usr/include/c++/8.1.0/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/8.1.0/cctype" 1 3
# 39 "/usr/include/c++/8.1.0/cctype" 3
       
# 40 "/usr/include/c++/8.1.0/cctype" 3
# 41 "/usr/include/c++/8.1.0/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/ctype_base.h" 1 3
# 36 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;

    static const mask blank = _ISblank;

  };


}
# 42 "/usr/include/c++/8.1.0/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/8.1.0/bits/streambuf_iterator.h" 1 3
# 33 "/usr/include/c++/8.1.0/bits/streambuf_iterator.h" 3
       
# 34 "/usr/include/c++/8.1.0/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/8.1.0/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 139 "/usr/include/c++/8.1.0/bits/streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

      ;
     

                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {
      

                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 49 "/usr/include/c++/8.1.0/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 929 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 962 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1011 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1028 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1044 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1061 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1081 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1104 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1130 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1156 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1181 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1214 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1225 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1249 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1268 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1286 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1304 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1321 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1338 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1354 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1371 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1391 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1413 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1436 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1462 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/usr/include/c++/8.1.0/x86_64-pc-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1535 "/usr/include/c++/8.1.0/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1665 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1703 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1717 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1731 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1744 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1775 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1788 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1801 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1818 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1830 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1843 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1856 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1869 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}


# 1947 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1968 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1994 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2031 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2134 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2207 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2270 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2288 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2309 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2327 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2369 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2432 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2457 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2505 "/usr/include/c++/8.1.0/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 1 3
# 33 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3
       
# 34 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 139 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1206 "/usr/include/c++/8.1.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2652 "/usr/include/c++/8.1.0/bits/locale_facets.h" 2 3
# 38 "/usr/include/c++/8.1.0/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "/usr/include/c++/8.1.0/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/8.1.0/bits/basic_ios.tcc" 1 3
# 33 "/usr/include/c++/8.1.0/bits/basic_ios.tcc" 3
       
# 34 "/usr/include/c++/8.1.0/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/usr/include/c++/8.1.0/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "/usr/include/c++/8.1.0/bits/basic_ios.h" 2 3
# 45 "/usr/include/c++/8.1.0/ios" 2 3
# 39 "/usr/include/c++/8.1.0/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/8.1.0/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/include/c++/8.1.0/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      flush();
# 357 "/usr/include/c++/8.1.0/ostream" 3
      pos_type
      tellp();
# 368 "/usr/include/c++/8.1.0/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "/usr/include/c++/8.1.0/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 425 "/usr/include/c++/8.1.0/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 444 "/usr/include/c++/8.1.0/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 454 "/usr/include/c++/8.1.0/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 473 "/usr/include/c++/8.1.0/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 495 "/usr/include/c++/8.1.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 537 "/usr/include/c++/8.1.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 588 "/usr/include/c++/8.1.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 600 "/usr/include/c++/8.1.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }


  template<typename _Ch, typename _Up>
    basic_ostream<_Ch, _Up>&
    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_ostream_impl
    {
      using __ostream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_ostream_impl =
    decltype(__is_convertible_to_basic_ostream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
    {
      using __ostream_type =
 __do_is_convertible_to_basic_ostream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream
    : __is_convertible_to_basic_ostream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Ostream, typename _Tp, typename = void>
    struct __is_insertable : false_type {};

  template<typename _Ostream, typename _Tp>
    struct __is_insertable<_Ostream, _Tp,
      __void_t<decltype(declval<_Ostream&>()
          << declval<const _Tp&>())>>
        : true_type {};

  template<typename _Ostream>
    using __rvalue_ostream_type =
      typename __is_convertible_to_basic_ostream<
 _Ostream>::__ostream_type;
# 674 "/usr/include/c++/8.1.0/ostream" 3
  template<typename _Ostream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
         __is_convertible_to_basic_ostream<_Ostream>,
         __is_insertable<
    __rvalue_ostream_type<_Ostream>,
    const _Tp&>>::value,
         __rvalue_ostream_type<_Ostream>>::type
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __rvalue_ostream_type<_Ostream> __ret_os = __os;
      __ret_os << __x;
      return __ret_os;
    }



}

# 1 "/usr/include/c++/8.1.0/bits/ostream.tcc" 1 3
# 37 "/usr/include/c++/8.1.0/bits/ostream.tcc" 3
       
# 38 "/usr/include/c++/8.1.0/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 694 "/usr/include/c++/8.1.0/ostream" 2 3
# 40 "/usr/include/c++/8.1.0/iostream" 2 3
# 1 "/usr/include/c++/8.1.0/istream" 1 3
# 36 "/usr/include/c++/8.1.0/istream" 3
       
# 37 "/usr/include/c++/8.1.0/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/8.1.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/usr/include/c++/8.1.0/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/usr/include/c++/8.1.0/istream" 3
      int_type
      get();
# 315 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/usr/include/c++/8.1.0/istream" 3
      int_type
      peek();
# 485 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/usr/include/c++/8.1.0/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      unget();
# 555 "/usr/include/c++/8.1.0/istream" 3
      int
      sync();
# 570 "/usr/include/c++/8.1.0/istream" 3
      pos_type
      tellg();
# 585 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/usr/include/c++/8.1.0/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "/usr/include/c++/8.1.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "/usr/include/c++/8.1.0/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "/usr/include/c++/8.1.0/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "/usr/include/c++/8.1.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "/usr/include/c++/8.1.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "/usr/include/c++/8.1.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "/usr/include/c++/8.1.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);


  template<typename _Ch, typename _Up>
    basic_istream<_Ch, _Up>&
    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_istream_impl
    {
      using __istream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_istream_impl =
    decltype(__is_convertible_to_basic_istream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_istream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
    {
      using __istream_type =
 __do_is_convertible_to_basic_istream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_istream
    : __is_convertible_to_basic_istream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Istream, typename _Tp, typename = void>
    struct __is_extractable : false_type {};

  template<typename _Istream, typename _Tp>
    struct __is_extractable<_Istream, _Tp,
       __void_t<decltype(declval<_Istream&>()
           >> declval<_Tp>())>>
    : true_type {};

  template<typename _Istream>
    using __rvalue_istream_type =
      typename __is_convertible_to_basic_istream<
 _Istream>::__istream_type;
# 972 "/usr/include/c++/8.1.0/istream" 3
  template<typename _Istream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
         __is_convertible_to_basic_istream<_Istream>,
         __is_extractable<
    __rvalue_istream_type<_Istream>,
    _Tp&&>>::value,
         __rvalue_istream_type<_Istream>>::type
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __rvalue_istream_type<_Istream> __ret_is = __is;
      __ret_is >> std::forward<_Tp>(__x);
      return __ret_is;
    }



}

# 1 "/usr/include/c++/8.1.0/bits/istream.tcc" 1 3
# 37 "/usr/include/c++/8.1.0/bits/istream.tcc" 3
       
# 38 "/usr/include/c++/8.1.0/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 try
   {
     if (__in.tie())
       __in.tie()->flush();
     if (!__noskip && bool(__in.flags() & ios_base::skipws))
       {
  const __int_type __eof = traits_type::eof();
  __streambuf_type* __sb = __in.rdbuf();
  __int_type __c = __sb->sgetc();

  const __ctype_type& __ct = __check_facet(__in._M_ctype);
  while (!traits_type::eq_int_type(__c, __eof)
         && __ct.is(ctype_base::space,
      traits_type::to_char_type(__c)))
    __c = __sb->snextc();




  if (traits_type::eq_int_type(__c, __eof))
    __err |= ios_base::eofbit;
       }
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     __in._M_setstate(ios_base::badbit);
     throw;
   }
 catch(...)
   { __in._M_setstate(ios_base::badbit); }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 521 "/usr/include/c++/8.1.0/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 992 "/usr/include/c++/8.1.0/istream" 2 3
# 41 "/usr/include/c++/8.1.0/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 60 "/usr/include/c++/8.1.0/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 3 "helloWorld.cpp" 2


# 4 "helloWorld.cpp"
int main(){
    bool initFlag = glfwInit();
    if (!initFlag){
        std::cerr <<"Cant initialize GLFW \n";
    }
    GLFWwindow * window = glfwCreateWindow(640,480,"helloWorld",
# 9 "helloWorld.cpp" 3 4
                                                               __null
# 9 "helloWorld.cpp"
                                                                   ,
# 9 "helloWorld.cpp" 3 4
                                                                    __null
# 9 "helloWorld.cpp"
                                                                        );
     while (!glfwWindowShouldClose(window)){
        glfwSwapBuffers(window);
        glfwPollEvents();
    };
    glfwTerminate();
}
